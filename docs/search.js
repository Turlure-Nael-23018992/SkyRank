window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "Core", "modulename": "Core", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Core.App", "modulename": "Core.App", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Core.App.App", "modulename": "Core.App", "qualname": "App", "kind": "class", "doc": "<p>Unified interface to execute Skyline algorithms on various data types\n(Dictionary, JSON, or Database) and optionally export the results.</p>\n"}, {"fullname": "Core.App.App.__init__", "modulename": "Core.App", "qualname": "App.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">algo</span>,</span><span class=\"param\">\t<span class=\"n\">exporter</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">input_type</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">input_file</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">preferences</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "Core.App.App.exporter", "modulename": "Core.App", "qualname": "App.exporter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Core.App.App.algo_instance", "modulename": "Core.App", "qualname": "App.algo_instance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Core.App.App.execution_time", "modulename": "Core.App", "qualname": "App.execution_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Core.App.App.pref", "modulename": "Core.App", "qualname": "App.pref", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Core.App.App.input_type", "modulename": "Core.App", "qualname": "App.input_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Core.App.App.input_file", "modulename": "Core.App", "qualname": "App.input_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Core.App.App.algo", "modulename": "Core.App", "qualname": "App.algo", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Core.AppUI", "modulename": "Core.AppUI", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Core.AppUI.PROJECT_ROOT", "modulename": "Core.AppUI", "qualname": "PROJECT_ROOT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;D:\\\\code\\\\Stage\\\\SkyRank&#x27;"}, {"fullname": "Core.AppUI.AppUI", "modulename": "Core.AppUI", "qualname": "AppUI", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "Core.AppUI.AppUI.__init__", "modulename": "Core.AppUI", "qualname": "AppUI.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">master</span><span class=\"p\">:</span> <span class=\"n\">tkinter</span><span class=\"o\">.</span><span class=\"n\">Tk</span></span>)</span>"}, {"fullname": "Core.AppUI.AppUI.root", "modulename": "Core.AppUI", "qualname": "AppUI.root", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Core.AppUI.AppUI.selectedDataPath", "modulename": "Core.AppUI", "qualname": "AppUI.selectedDataPath", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Core.AppUI.AppUI.lastAppInstance", "modulename": "Core.AppUI", "qualname": "AppUI.lastAppInstance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Core.AppUI.main", "modulename": "Core.AppUI", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Core.AppUIPyQT", "modulename": "Core.AppUIPyQT", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Core.AppUIPyQT.AppUIPyQt", "modulename": "Core.AppUIPyQT", "qualname": "AppUIPyQt", "kind": "class", "doc": "<p>QMainWindow(parent: Optional[QWidget] = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags())</p>\n", "bases": "PyQt5.QtWidgets.QMainWindow"}, {"fullname": "Core.AppUIPyQT.AppUIPyQt.selectedDataPath", "modulename": "Core.AppUIPyQT", "qualname": "AppUIPyQt.selectedDataPath", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Core.AppUIPyQT.AppUIPyQt.lastAppInstance", "modulename": "Core.AppUIPyQT", "qualname": "AppUIPyQt.lastAppInstance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Core.AppUIPyQT.AppUIPyQt.tableName", "modulename": "Core.AppUIPyQT", "qualname": "AppUIPyQt.tableName", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Core.AppUIPyQT.AppUIPyQt.initUI", "modulename": "Core.AppUIPyQT", "qualname": "AppUIPyQt.initUI", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Core.AppUIPyQT.AppUIPyQt.list_files", "modulename": "Core.AppUIPyQT", "qualname": "AppUIPyQt.list_files", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dtype</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Core.AppUIPyQT.AppUIPyQt.on_data_type_changed", "modulename": "Core.AppUIPyQT", "qualname": "AppUIPyQt.on_data_type_changed", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Core.AppUIPyQT.AppUIPyQt.clear_layout", "modulename": "Core.AppUIPyQT", "qualname": "AppUIPyQt.clear_layout", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">layout</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Core.AppUIPyQT.AppUIPyQt.on_file_selected", "modulename": "Core.AppUIPyQT", "qualname": "AppUIPyQt.on_file_selected", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Core.AppUIPyQT.AppUIPyQt.import_file", "modulename": "Core.AppUIPyQT", "qualname": "AppUIPyQt.import_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Core.AppUIPyQT.AppUIPyQt.load_data", "modulename": "Core.AppUIPyQT", "qualname": "AppUIPyQt.load_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dtype</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Core.AppUIPyQT.AppUIPyQt.count_columns", "modulename": "Core.AppUIPyQT", "qualname": "AppUIPyQt.count_columns", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">dtype</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Core.AppUIPyQT.AppUIPyQt.run_algorithm", "modulename": "Core.AppUIPyQT", "qualname": "AppUIPyQt.run_algorithm", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Core.AppUIPyQT.AppUIPyQt.get_skyline_points", "modulename": "Core.AppUIPyQT", "qualname": "AppUIPyQt.get_skyline_points", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Core.AppUIPyQT.AppUIPyQt.display_graph", "modulename": "Core.AppUIPyQT", "qualname": "AppUIPyQt.display_graph", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">all_points</span>, </span><span class=\"param\"><span class=\"n\">skyline_points</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Core.AppUIPyQT.AppUIPyQt.view_skyline_points", "modulename": "Core.AppUIPyQT", "qualname": "AppUIPyQt.view_skyline_points", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Core.AppUIPyQT.main", "modulename": "Core.AppUIPyQT", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Core.LatexMain", "modulename": "Core.LatexMain", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Core.LatexMain.LatexMain", "modulename": "Core.LatexMain", "qualname": "LatexMain", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "Core.LatexMain.LatexMain.generator", "modulename": "Core.LatexMain", "qualname": "LatexMain.generator", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Core.LatexMain.LatexMain.root_dir", "modulename": "Core.LatexMain", "qualname": "LatexMain.root_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Core.LatexMain.LatexMain.base_path", "modulename": "Core.LatexMain", "qualname": "LatexMain.base_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Core.LatexMain.LatexMain.ask_user_inputs", "modulename": "Core.LatexMain", "qualname": "LatexMain.ask_user_inputs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Core.LatexMain.LatexMain.calculate_execution_time", "modulename": "Core.LatexMain", "qualname": "LatexMain.calculate_execution_time", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">algo_enum</span>, </span><span class=\"param\"><span class=\"n\">output_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Core.LatexMain.LatexMain.load_data", "modulename": "Core.LatexMain", "qualname": "LatexMain.load_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">paths</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Core.LatexMain.LatexMain.compute_max_rows", "modulename": "Core.LatexMain", "qualname": "LatexMain.compute_max_rows", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_dicts</span>, </span><span class=\"param\"><span class=\"n\">attributes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Core.LatexMain.LatexMain.compute_max_times", "modulename": "Core.LatexMain", "qualname": "LatexMain.compute_max_times", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_dicts</span>, </span><span class=\"param\"><span class=\"n\">attributes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Core.LatexMain.LatexMain.build_output_path", "modulename": "Core.LatexMain", "qualname": "LatexMain.build_output_path", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">algo_names</span>, </span><span class=\"param\"><span class=\"n\">count</span>, </span><span class=\"param\"><span class=\"n\">scale_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Core.LatexMain.LatexMain.run", "modulename": "Core.LatexMain", "qualname": "LatexMain.run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Core.LatexMain.main", "modulename": "Core.LatexMain", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms", "modulename": "Algorithms", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Algorithms.BbsCosky", "modulename": "Algorithms.BbsCosky", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Algorithms.BbsCosky.BbsCosky", "modulename": "Algorithms.BbsCosky", "qualname": "BbsCosky", "kind": "class", "doc": "<p>BBS Algorithm</p>\n"}, {"fullname": "Algorithms.BbsCosky.BbsCosky.__init__", "modulename": "Algorithms.BbsCosky", "qualname": "BbsCosky.__init__", "kind": "function", "doc": "<p>Initialize the BBS algorithm with the given relation, sp, layer, and minIdp.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>relation</strong>:  the relation to be processed</li>\n<li><strong>sp</strong>:  the skyline point</li>\n<li><strong>layer</strong>:  the layer of the skyline</li>\n<li><strong>minIdp</strong>:  the minimum idp</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">relation</span>, </span><span class=\"param\"><span class=\"n\">sp</span>, </span><span class=\"param\"><span class=\"n\">layer</span>, </span><span class=\"param\"><span class=\"n\">minIdp</span><span class=\"o\">=</span><span class=\"p\">{}</span></span>)</span>"}, {"fullname": "Algorithms.BbsCosky.BbsCosky.DISK_PAGE_SIZE", "modulename": "Algorithms.BbsCosky", "qualname": "BbsCosky.DISK_PAGE_SIZE", "kind": "variable", "doc": "<p></p>\n", "default_value": "2048"}, {"fullname": "Algorithms.BbsCosky.BbsCosky.POINTER", "modulename": "Algorithms.BbsCosky", "qualname": "BbsCosky.POINTER", "kind": "variable", "doc": "<p></p>\n", "default_value": "4"}, {"fullname": "Algorithms.BbsCosky.BbsCosky.KEYS", "modulename": "Algorithms.BbsCosky", "qualname": "BbsCosky.KEYS", "kind": "variable", "doc": "<p></p>\n", "default_value": "8"}, {"fullname": "Algorithms.BbsCosky.BbsCosky.M", "modulename": "Algorithms.BbsCosky", "qualname": "BbsCosky.M", "kind": "variable", "doc": "<p></p>\n", "default_value": "170.66666666666666"}, {"fullname": "Algorithms.BbsCosky.BbsCosky.relation", "modulename": "Algorithms.BbsCosky", "qualname": "BbsCosky.relation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.BbsCosky.BbsCosky.minIdp", "modulename": "Algorithms.BbsCosky", "qualname": "BbsCosky.minIdp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.BbsCosky.BbsCosky.sp", "modulename": "Algorithms.BbsCosky", "qualname": "BbsCosky.sp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.BbsCosky.BbsCosky.layer", "modulename": "Algorithms.BbsCosky", "qualname": "BbsCosky.layer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.BbsCosky.BbsCosky.rTree", "modulename": "Algorithms.BbsCosky", "qualname": "BbsCosky.rTree", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.BbsCosky.BbsCosky.bbs", "modulename": "Algorithms.BbsCosky", "qualname": "BbsCosky.bbs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.BbsCosky.BbsCosky.skyline", "modulename": "Algorithms.BbsCosky", "qualname": "BbsCosky.skyline", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.BbsCosky.BbsCosky.fillRTree", "modulename": "Algorithms.BbsCosky", "qualname": "BbsCosky.fillRTree", "kind": "function", "doc": "<p>Fill the R-Tree with the relation data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.BbsCosky.BbsCosky.skylines_to_dict", "modulename": "Algorithms.BbsCosky", "qualname": "BbsCosky.skylines_to_dict", "kind": "function", "doc": "<p>Convert the list of skylines to a dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>skylines</strong>:  the list of skylines</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">skylines</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.CoskyAlgorithme", "modulename": "Algorithms.CoskyAlgorithme", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme", "kind": "class", "doc": "<p>Class to implement the Cosky algorithm for ranking and sorting data based on multiple criteria.</p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.__init__", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">r</span>, </span><span class=\"param\"><span class=\"n\">pref</span>, </span><span class=\"param\"><span class=\"n\">is_debug</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.is_debug", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.is_debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.pref", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.pref", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.r", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.r", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.bbs", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.bbs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.s", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.s", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.data_keys", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.data_keys", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.n", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.n", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.m", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.tot", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.tot", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.ni", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.ni", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.gini", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.gini", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.totGini", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.totGini", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.totNN", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.totNN", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.p", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.p", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.totPP", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.totPP", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.ideal", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.ideal", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.totIdealIdeal", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.totIdealIdeal", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.sqrtTotPP", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.sqrtTotPP", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.sqrtTotIdealIdeal", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.sqrtTotIdealIdeal", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.totIdealP", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.totIdealP", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.time", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.unifyMin", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.unifyMin", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.run", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.run", "kind": "function", "doc": "<p>Run the Cosky algorithm to compute the ranking and sorting of data based on multiple criteria.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.CoskyAlgorithme.CoskyAlgorithme.sort", "modulename": "Algorithms.CoskyAlgorithme", "qualname": "CoskyAlgorithme.sort", "kind": "function", "doc": "<p>Sort the data based on the last column of the dictionary which is the score.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rev</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.CoskySql", "modulename": "Algorithms.CoskySql", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskySql.safe_sqrt", "modulename": "Algorithms.CoskySql", "qualname": "safe_sqrt", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.CoskySql.CoskySQL", "modulename": "Algorithms.CoskySql", "qualname": "CoskySQL", "kind": "class", "doc": "<p>Class to implement the Cosky algorithm for ranking and sorting data based on multiple criteria using SQLite.</p>\n"}, {"fullname": "Algorithms.CoskySql.CoskySQL.__init__", "modulename": "Algorithms.CoskySql", "qualname": "CoskySQL.__init__", "kind": "function", "doc": "<p>Initialize the Cosky algorithm with the given database file path and debug flag.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_filepath</strong>:  the path to the SQLite database file</li>\n<li><strong>is_debug</strong>:  flag to enable debug mode</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db_filepath</span>, </span><span class=\"param\"><span class=\"n\">preferences</span>, </span><span class=\"param\"><span class=\"n\">is_debug</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "Algorithms.CoskySql.CoskySQL.pref", "modulename": "Algorithms.CoskySql", "qualname": "CoskySQL.pref", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskySql.CoskySQL.dbFilepath", "modulename": "Algorithms.CoskySql", "qualname": "CoskySQL.dbFilepath", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskySql.CoskySQL.is_debug", "modulename": "Algorithms.CoskySql", "qualname": "CoskySQL.is_debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskySql.CoskySQL.relations", "modulename": "Algorithms.CoskySql", "qualname": "CoskySQL.relations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskySql.CoskySQL.conn", "modulename": "Algorithms.CoskySql", "qualname": "CoskySQL.conn", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskySql.CoskySQL.cursor", "modulename": "Algorithms.CoskySql", "qualname": "CoskySQL.cursor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskySql.CoskySQL.table_name", "modulename": "Algorithms.CoskySql", "qualname": "CoskySQL.table_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskySql.CoskySQL.colonnes_initiales_str", "modulename": "Algorithms.CoskySql", "qualname": "CoskySQL.colonnes_initiales_str", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskySql.CoskySQL.dict", "modulename": "Algorithms.CoskySql", "qualname": "CoskySQL.dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskySql.CoskySQL.colonne_names", "modulename": "Algorithms.CoskySql", "qualname": "CoskySQL.colonne_names", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskySql.CoskySQL.time", "modulename": "Algorithms.CoskySql", "qualname": "CoskySQL.time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.CoskySql.CoskySQL.get_column_names", "modulename": "Algorithms.CoskySql", "qualname": "CoskySQL.get_column_names", "kind": "function", "doc": "<p>Get the column's names of the table</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nom_table</strong>:  the table name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The column's names in a list</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nom_table</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.CoskySql.CoskySQL.nombre_colonnes_table", "modulename": "Algorithms.CoskySql", "qualname": "CoskySQL.nombre_colonnes_table", "kind": "function", "doc": "<p>Get the columns length</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nom_table</strong>:  Le name of the table</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Le number of column into the table (int)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nom_table</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.CoskySql.CoskySQL.run", "modulename": "Algorithms.CoskySql", "qualname": "CoskySQL.run", "kind": "function", "doc": "<p>Run the Cosky algorithm to compute the ranking and sorting of data based on multiple criteria.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The result of the Cosky algorithm</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.CoskySql.CoskySQL.unifyPreferences", "modulename": "Algorithms.CoskySql", "qualname": "CoskySQL.unifyPreferences", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.CoskySql.CoskySQL.unifyPreferencesQuery", "modulename": "Algorithms.CoskySql", "qualname": "CoskySQL.unifyPreferencesQuery", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DP_IDP_cpp", "modulename": "Algorithms.DP_IDP_cpp", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Algorithms.DP_IDP_cpp.ffi", "modulename": "Algorithms.DP_IDP_cpp", "qualname": "ffi", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;cffi.api.FFI object&gt;"}, {"fullname": "Algorithms.DP_IDP_cpp.C", "modulename": "Algorithms.DP_IDP_cpp", "qualname": "C", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "Algorithms.DP_IDP_cpp.DP_IDP", "modulename": "Algorithms.DP_IDP_cpp", "qualname": "DP_IDP", "kind": "class", "doc": "<p>Class to implement the DP_IDP algorithm for ranking and sorting data based on multiple criteria.</p>\n"}, {"fullname": "Algorithms.DP_IDP_cpp.DP_IDP.__init__", "modulename": "Algorithms.DP_IDP_cpp", "qualname": "DP_IDP.__init__", "kind": "function", "doc": "<p>Initialize the DP_IDP algorithm with the given relation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>r</strong>:  the relation to be processed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">r</span></span>)</span>"}, {"fullname": "Algorithms.DP_IDP_cpp.DP_IDP.r", "modulename": "Algorithms.DP_IDP_cpp", "qualname": "DP_IDP.r", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.DP_IDP_cpp.DP_IDP.run", "modulename": "Algorithms.DP_IDP_cpp", "qualname": "DP_IDP.run", "kind": "function", "doc": "<p>Run the DP_IDP algorithm to compute the ranking and sorting of data based on multiple criteria.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DP_IDP_cpp.DP_IDP.calculMatriceDesDominants", "modulename": "Algorithms.DP_IDP_cpp", "qualname": "DP_IDP.calculMatriceDesDominants", "kind": "function", "doc": "<p>Calculate the dominance matrix and the skyline points.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>r</strong>:  the relation to be processed</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dominance matrix and skyline points</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">r</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DP_IDP_cpp.DP_IDP.calculGrapheDeCouverture", "modulename": "Algorithms.DP_IDP_cpp", "qualname": "DP_IDP.calculGrapheDeCouverture", "kind": "function", "doc": "<p>Calculate the coverage graph and the skyline points.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dom</strong>:  dominance matrix</li>\n<li><strong>sp</strong>:  skyline points</li>\n<li><strong>display_graph</strong>:  display the graph if True</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dominance matrix, coverage graph, total skyline points, skyline cardinality, and dominance cardinality</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dom</span>, </span><span class=\"param\"><span class=\"n\">sp</span>, </span><span class=\"param\"><span class=\"n\">display_graph</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DP_IDP_cpp.DP_IDP.calculLm", "modulename": "Algorithms.DP_IDP_cpp", "qualname": "DP_IDP.calculLm", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dom</span>, </span><span class=\"param\"><span class=\"n\">sky</span>, </span><span class=\"param\"><span class=\"n\">skyCard</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DP_IDP_cpp.DP_IDP.calculScore", "modulename": "Algorithms.DP_IDP_cpp", "qualname": "DP_IDP.calculScore", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sky</span>, </span><span class=\"param\"><span class=\"n\">domCard</span>, </span><span class=\"param\"><span class=\"n\">spTot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DeepSky", "modulename": "Algorithms.DeepSky", "kind": "module", "doc": "<p>=======</p>\n\n<h1 id=\"deepsky\">DeepSky</h1>\n\n<p>Entr\u00e9e :\n        La relation r.\n        Un entier k.\nSortie :\n    Ldx top-k tuples/points avec les meilleurs scores topk.</p>\n\n<p>topk &lt;- nouveau tableau\ntot &lt;- 0 // Nombre total de r\u00e9sultats calcul\u00e9s\nrl = r // Niveau courant\nTant que tot &gt;= k and !rl\n    s &lt;- CoSky(rl)\n        n &lt;- taille(s) - 1\n        tot &lt;- tot + taille(s)\n        Si tot &lt; k\n        topk &lt;- topk U s\n                rl &lt;- rl \\ s\n        Sinon\n            Si tot &gt;= k\n                    Pour i de 0 \u00e0 k\n                        topk[i] &lt;- s[i]\n                        retourner topk</p>\n\n<p>retourner topk</p>\n"}, {"fullname": "Algorithms.DeepSky.MODES", "modulename": "Algorithms.DeepSky", "qualname": "MODES", "kind": "variable", "doc": "<p>r = [\n    (1, 5, 20, 1 / 70),\n    (2, 4, 60, 1 / 50),\n    (3, 5, 30, 1 / 60),\n    (4, 1, 80, 1 / 60),\n    (5, 5, 90, 1 / 40),\n    (6, 9, 30, 1 / 50),\n    (7, 7, 80, 1 / 40),\n    (8, 9, 90, 1 / 30)\n]</p>\n", "default_value": "{&#x27;CoskyAlgo&#x27;: &lt;class &#x27;Algorithms.CoskyAlgorithme.CoskyAlgorithme&#x27;&gt;, &#x27;CoskySql&#x27;: &lt;class &#x27;Algorithms.CoskySql.CoskySQL&#x27;&gt;, &#x27;DpIdpDh&#x27;: &lt;class &#x27;Algorithms.DpIdpDh.DpIdpDh&#x27;&gt;, &#x27;RankSky&#x27;: &lt;class &#x27;Algorithms.RankSky.RankSky&#x27;&gt;, &#x27;SkyIR&#x27;: &lt;class &#x27;Algorithms.SkyIR.SkyIR&#x27;&gt;}"}, {"fullname": "Algorithms.DeepSky.r_next", "modulename": "Algorithms.DeepSky", "qualname": "r_next", "kind": "variable", "doc": "<p></p>\n", "default_value": "{1: (5, 20, 0.014285714285714285), 2: (4, 60, 0.02), 4: (1, 80, 0.016666666666666666)}"}, {"fullname": "Algorithms.DeepSky.r", "modulename": "Algorithms.DeepSky", "qualname": "r", "kind": "variable", "doc": "<p>def DeepSky(r,k):\n    topK={}\n    tot=0\n    rl=r</p>\n\n<pre><code>while tot&lt;k and rl!={}:\n    print(100*\"*\")\n    print(\"rl:\n</code></pre>\n\n<p>\",'\n'.join([str(x) for x in rl.items()]))\n        print()\n        #s=Cosky(rl).relations\n        s = r_next\n        tot+=len(s)</p>\n\n<pre><code>    if tot&lt;=k:\n        print(100*\"-\")\n        topK.update(s)\n        print(\"topK:\n</code></pre>\n\n<p>\",'\n'.join([str(x) for x in topK.items()]))\n            print()\n            print(\"s:\n\",'\n'.join([str(x) for x in s.items()]))\n            print()\n            #print(f\"rl:{rl}\")</p>\n\n<pre><code>        rl = {k:v for k,v in rl.items() if k not in s.keys()}\n    else:\n        print(100 * \"|\")\n        topK.update({x:s[x] for x in list(s.keys())[:k]})\n        print(\"topK:\n</code></pre>\n\n<p>\", '\n'.join([str(x) for x in topK.items()]))\n            print()</p>\n\n<pre><code>        return topK\nreturn topK\n</code></pre>\n\n<p>res = DeepSky(r,k)\nprint(res)</p>\n", "default_value": "{1: (5, 20, 0.014285714285714285), 2: (4, 60, 0.02), 3: (5, 30, 0.016666666666666666), 4: (1, 80, 0.016666666666666666), 5: (5, 90, 0.025), 6: (9, 30, 0.02), 7: (7, 80, 0.025), 8: (9, 90, 0.03333333333333333)}"}, {"fullname": "Algorithms.DeepSky.addBest", "modulename": "Algorithms.DeepSky", "qualname": "addBest", "kind": "function", "doc": "<p>Add the best elements to the topK based on the score (last value of the tuple).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>k</strong>:  the number of top elements to add</li>\n<li><strong>topK</strong>:  the topK</li>\n<li><strong>s</strong>:  the elements to add</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">k</span>, </span><span class=\"param\"><span class=\"n\">topK</span>, </span><span class=\"param\"><span class=\"n\">s</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DeepSky.DeepSky", "modulename": "Algorithms.DeepSky", "qualname": "DeepSky", "kind": "class", "doc": "<p>Class to implement the DeepSky algorithm with SQL.</p>\n"}, {"fullname": "Algorithms.DeepSky.DeepSky.__init__", "modulename": "Algorithms.DeepSky", "qualname": "DeepSky.__init__", "kind": "function", "doc": "<p>Initialize the DeepSky algorithm with the given database file path and relation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fp</strong>:  the path to the SQLite database file</li>\n<li><strong>k</strong>:  the number of top tuples to find</li>\n<li><strong>algo</strong>:  the algorithm to use (CoskySQL, CoskyAlgorithme, DpIdpDh, RankSky, SkyIR)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fp</span>, </span><span class=\"param\"><span class=\"n\">k</span>, </span><span class=\"param\"><span class=\"n\">algo</span>, </span><span class=\"param\"><span class=\"n\">pref</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "Algorithms.DeepSky.DeepSky.dbToDict", "modulename": "Algorithms.DeepSky", "qualname": "DeepSky.dbToDict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.DeepSky.DeepSky.fp", "modulename": "Algorithms.DeepSky", "qualname": "DeepSky.fp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.DeepSky.DeepSky.r", "modulename": "Algorithms.DeepSky", "qualname": "DeepSky.r", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.DeepSky.DeepSky.k", "modulename": "Algorithms.DeepSky", "qualname": "DeepSky.k", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.DeepSky.DeepSky.algo", "modulename": "Algorithms.DeepSky", "qualname": "DeepSky.algo", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.DeepSky.DeepSky.topK", "modulename": "Algorithms.DeepSky", "qualname": "DeepSky.topK", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.DeepSky.DeepSky.dataNorm", "modulename": "Algorithms.DeepSky", "qualname": "DeepSky.dataNorm", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.DeepSky.DeepSky.lineToInsertBack", "modulename": "Algorithms.DeepSky", "qualname": "DeepSky.lineToInsertBack", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.DeepSky.DeepSky.preference", "modulename": "Algorithms.DeepSky", "qualname": "DeepSky.preference", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.DeepSky.DeepSky.DeepSkyCoskySql", "modulename": "Algorithms.DeepSky", "qualname": "DeepSky.DeepSkyCoskySql", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DeepSky.DeepSky.DeepSky", "modulename": "Algorithms.DeepSky", "qualname": "DeepSky.DeepSky", "kind": "function", "doc": "<p>DeepSky algorithm to find the top-k tuples with the best scores.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the top-k tuples</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DeepSky.DeepSky.delLines", "modulename": "Algorithms.DeepSky", "qualname": "DeepSky.delLines", "kind": "function", "doc": "<p>Delete the lines from the database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>linesToSave</strong>:  the lines to delete</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">linesToSave</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DeepSky.DeepSky.run", "modulename": "Algorithms.DeepSky", "qualname": "DeepSky.run", "kind": "function", "doc": "<p>Run the DeepSky algorithm.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the top-k tuples</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DpIdpDh", "modulename": "Algorithms.DpIdpDh", "kind": "module", "doc": "<hr />\n\n<p>L\u00e9gende : 0->false, 1 -> true</p>\n\n<p>dom et sp apr\u00e8s calculMatriceDesDominants() :\n(1) / 0 0 0 0 0 0 0 | 0 |\n(2) 0 / 0 0 0 0 0 0 | 0 |\n(3) 1 0 / 0 0 0 0 0 | 1 |\n(4) 0 0 0 / 0 0 0 0 | 0 |\n(5) 1 1 1 1 / 0 0 0 | 1 |\n(6) 1 0 1 0 0 / 0 0 | 1 |\n(7) 1 1 1 1 0 0 / 0 | 1 |\n(8) 1 1 1 1 1 1 1 / | 1 |</p>\n\n<p>dom et sp apr\u00e8s calculGrapheDeCouverture() :\n(1) / 0 0 0 0 0 0 0 | 0 |\n(2) 0 / 0 0 0 0 0 0 | 0 |\n(3) 1 0 / 0 0 0 0 0 | 1 |\n(4) 0 0 0 / 0 0 0 0 | 0 |\n(5) 0 1 1 1 / 0 0 0 | 1 |\n(6) 0 0 1 0 0 / 0 0 | 1 |\n(7) 0 1 1 1 0 0 / 0 | 1 |\n(8) 0 0 0 0 1 1 1 / | 1 |</p>\n\n<p>sky, skyCard apr\u00e8s calculGrapheDeCouverture() :\n(1) 0 0 1 0 1 1 1 1 | 5\n(2) 0 0 0 0 1 0 1 1 | 3\n(4) 0 0 0 0 1 0 1 1 | 3</p>\n\n<p>sky, skyCard et score calculLm() et calculScore() :\n(1) 0 0 2 0 3 3 3 4 | 0 | 0.835\n(2) 0 0 0 0 2 0 2 3 | 0 | 0.636\n(4) 0 0 0 0 2 0 2 3 | 0 | 0.636</p>\n\n<hr />\n\n<p>==============================</p>\n\n<h1 id=\"dpidpavechierarchiededominance\">dpIdpAvecHierarchieDeDominance</h1>\n\n<p>Entr\u00e9e :\n    La relation r.\nSortie :\n    Le tableau des scores de dp-idp.</p>\n\n<p>calculMatriceDesDominants(r);</p>\n\n<p>calculGrapheDeCouverture(dom, sp);</p>\n\n<p>calculLm(dom, sky, skyCard);</p>\n\n<p>calculScore(sky, spTot);</p>\n\n<p>=========================</p>\n\n<h1 id=\"calculmatricedesdominants\">calculMatriceDesDominants</h1>\n\n<p>Entr\u00e9e :\n    La relation r.\nSortie :\n    Le tableau \u00e0 deux dimensions carr\u00e9 indiquant les dominances dom.\n    Le tableau indiquant les points du Skyline sp.</p>\n\n<p>dom &lt;- nouveau tableau\nsp &lt;- nouveau tableau\nPour i de 0 \u00e0 taille(r) - 1\n    dom[i] &lt;- nouveau tableau\n    sp[i] &lt;- false\n    Pour j de 0 \u00e0 taille(r) - 1\n        Si i = j\n            dom[i][j] = \"/\"\n        Sinon\n            sup &lt;- vrai\n            Pour k de 0 \u00e0 taille(r[j]) - 1\n                Si r[j][k] &gt; r[i][k] // \">\" car Pr\u00e9f\u00e9rences = MIN, MIN, MIN\n                    sup &lt;- faux\n                    break\n            Si sup\n                dom [i][k] = true\n                sp[i] &lt;- true\n            Sinon\n                dom[i][k] = false</p>\n\n<p>========================</p>\n\n<h1 id=\"calculgraphedecouverture\">calculGrapheDeCouverture</h1>\n\n<p>Entr\u00e9e :\n    Le tableau \u00e0 deux dimensions carr\u00e9 indiquant les dominances dom.\n    Le tableau indiquant les points du Skyline sp.\nSortie :\n    Le tableau \u00e0 deux dimensions carr\u00e9 indiquant les dominances du graphe de couveture dom.\n    Le tableau des points du Skyline sky.\n    Le nombre de points du Skyline spTot.\n    Le tableau des cardinalit\u00e9s de dominance des points du Skyline skyCard.</p>\n\n<p>sky &lt;- nouveau tableau\nspTot &lt;- 0\nskyCard &lt;- nouveau tableau\nn &lt;- taille(dom) - 1\nPour i de 0 \u00e0 n\n    Si sp[i]\n        sky[i] &lt;- nouveau tableau\n        spTot = spTot + 1\n        skyCard[i] &lt;- 0\n    Sinon\n        Pour j de 0 \u00e0 n\n            Si i != j et !sp[j] et dom[i, j]\n                Si j dans sky\n                    sky[j][i] &lt;- 1\n                    skyCard[j] &lt;- skyCard[j] + 1\n                Pour k de 0 \u00e0 n\n                    Si dom[j][k]\n                        dom[i][k] &lt;- false</p>\n\n<p>========</p>\n\n<h1 id=\"calcullm\">calculLm</h1>\n\n<p>Entr\u00e9e :\n    Le tableau \u00e0 deux dimensions carr\u00e9 indiquant les dominances du graphe de couveture dom.\n    Le tableau des points du Skyline sky.\n    Le tableau des cardinalit\u00e9s de dominance des points du Skyline skyCard.\nSortie :\n    Le tableau des points du Skyline avec les lm des points domin\u00e9s sky.</p>\n\n<p>Pour tout i dans sky\n    lm(dom, sky, skyCard, i, 1)</p>\n\n<p>fonction lm(dom, sky, skyCard, i, prof)\n    Si skyCard[i] = 0\n        return\n    Pour j de 0 \u00e0 n\n        Si dom[j][i]\n            sky[i][j] = sky[i][j] + prof\n            skyCard[i] &lt;- skyCard[i] - 1\n            lm(dom, sky, skyCard, j, prof + 1)</p>\n\n<p>===========</p>\n\n<h1 id=\"calculscore\">calculScore</h1>\n\n<p>Entr\u00e9e :\n    Le tableau des points du Skyline avec les lm des points domin\u00e9s sky.\n    Le nombre de points du Skyline spTot.\nSortie :\n    Le tableau des scores de dp-idp.</p>\n\n<p>// idp n'est calcul\u00e9 que pour les sp, alors|{sp'...}| = 1\nidp &lt;- log(spTot)\nscore &lt;- nouveau tableau\nPour tout i dans sky\n    tot &lt;- 0\n    Pour j de 0 \u00e0 n\n        tot &lt;- tot + 1/sky[i][j]\n    score[i] &lt;- tot x idp</p>\n\n<p>===========</p>\n\n<h1 id=\"coskysql_param\">CoskySQL_param</h1>\n\n<p>Entr\u00e9e :\n    La relation r.\n    Le tableau d'attributs de la relation r att.\nSortie :\n    Le skyline de r, avec son score, ordonn\u00e9 par Cosky.</p>\n\n<p>n &lt;- taille(att) - 1\nSi n &lt; 1\n    return</p>\n\n<p>// \"&lt;=\" de S. (skyline)\ns1 = \"R2.\" + att[0] + \" &lt;= \" R1.\" + att[0]\nPour i de 1 \u00e0 n\n    s1 = s1 + \" AND R2.\" + att[i] + \" &lt;= \" R1.\" + att[i]</p>\n\n<p>// \"&lt;\" de S.\ns2 = \"R2.\" + att[0] + \" &lt; \" R1.\" + att[0]\nPour i de 1 \u00e0 n\n    s2 = s2 + \" OR R2.\" + att[i] + \" &lt; \" R1.\" + att[i]</p>\n\n<p>// N de SN.\nsnn = att[0] + \" / T\" + att[0] + \" AS N\" + att[0]\nPour i de 1 \u00e0 n\n    snn = snn + \", \" + att[i] + \" / T\" + att[i] + \" AS N\" + att[i]</p>\n\n<p>// T de SN.\nsnt = \"SUM(\" + att[0] + \") AS T\" + att[0]\nPour i de 1 \u00e0 n\n    snt = snt + \", SUM(\" + att[i] + \") AS T\" + att[i]</p>\n\n<p>// SGini.\nsgini = \"1 - (SUM(N\" + att[0] + \" * N\" + att[0] + \")) AS Gini\" + att[0]\nPour i de 1 \u00e0 n\n    sgini = sgini + \", 1 - (SUM(N\" + att[i] + \" * N\" + att[i] + \")) AS Gini\" + att[i]</p>\n\n<p>// Somme des Gini.\nginiTot = \"Gini\" + att[0]\nPour i de 1 \u00e0 n\n    giniTot = giniTot + \" + Gini\" + att[i]</p>\n\n<p>// SW.\nsw = \"Gini\" + att[0] + \" / (\" + giniTot + \") AS W\" + att[0]\nPour i de 1 \u00e0 n\n    sw = sw + \", Gini\" + att[i] + \" / (\" + giniTot + \") AS W\" + att[i]</p>\n\n<p>// SP.\nsp = \"W\" + att[0] + \" * N\" + att[0] + \" AS P\" + att[0]\nPour i de 1 \u00e0 n\n    sp = sp + \", W\" + att[i] + \" * N\" + att[i] + \" AS P\" + att[i]</p>\n\n<p>// Id\u00e9al.\nideal = \"MIN(P\" + att[0] + \") AS I\" + att[0]\nPour i de 1 \u00e0 n\n    ideal = ideal + \", MIN(P\" + att[i] + \") AS I\" + att[i]</p>\n\n<p>// Num\u00e9rateur du score.\nscoreNum = \"I\" + att[0] + \" * P\" + att[0]\nPour i de 1 \u00e0 n\n    scoreNum = scoreNum + \" + I\" + att[i] + \" * P\" + att[i]</p>\n\n<p>// P\u00b2.\npp = \"P\" + att[0] + \" * P\" + att[0]\nPour i de 1 \u00e0 n\n    pp = pp + \" + P\" + att[i] + \" * P\" + att[i]</p>\n\n<p>// I\u00b2.\nii = \"I\" + att[0] + \" * I\" + att[0]\nPour i de 1 \u00e0 n\n    ii = ii + \" + I\" + att[i] + \" * I\" + att[i]</p>\n\n<p>// Projection finale.\nproj = att[0]\nPour i de 1 \u00e0 n\n    proj = proj + \", \" + att[i]</p>\n\n<p>q = \"WITH S AS (SELECT * FROM \" + r + \" AS R1\nWHERE NOT EXISTS (SELECT * FROM \" + r + \" AS R2 WHERE (\" + s1 + \") AND (\" + s2 + \"))),\nSN AS (SELECT RowId, \" + snn + \" FROM S, (SELECT \" + snt + \" FROM S) AS ST),\nSGini AS (SELECT \" + sgini + \" FROM SN),\nSW AS (SELECT \" + sw + \" FROM SGini),\nSP AS (SELECT RowId, \" + sp + \" FROM SN, SW),\nId\u00e9al AS (SELECT \" + ideal + FROM SP),\nSScore AS (SELECT RowId, (\" + scoreNum + \") / (SQRT(\" + pp + \") * SQRT(\" + ii + \")) AS Score FROM Id\u00e9al, SP)\nSELECT \" + r + \".RowId, \" + proj + \", ROUND(Score, 3) AS Score\nFROM \" + r + \" INNER JOIN SScore rs ON \" + r + \".RowId = rs.RowId\nORDER BY Score DESC;\"\n\u1427</p>\n\n<hr />\n"}, {"fullname": "Algorithms.DpIdpDh.display_matrice", "modulename": "Algorithms.DpIdpDh", "qualname": "display_matrice", "kind": "function", "doc": "<p>Display a matrix or a dictionary in a formatted way.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>matrice</strong>:  the matrix or dictionary to display</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">matrice</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DpIdpDh.dom", "modulename": "Algorithms.DpIdpDh", "qualname": "dom", "kind": "variable", "doc": "<p></p>\n", "default_value": "[[&#x27;/&#x27;, 0, 0, 0, 0, 0, 0, 0], [0, &#x27;/&#x27;, 0, 0, 0, 0, 0, 0], [1, 0, &#x27;/&#x27;, 0, 0, 0, 0, 0], [0, 0, 0, &#x27;/&#x27;, 0, 0, 0, 0], [1, 1, 1, 1, &#x27;/&#x27;, 0, 0, 0], [1, 0, 1, 0, 0, &#x27;/&#x27;, 0, 0], [1, 1, 1, 1, 0, 0, &#x27;/&#x27;, 0], [1, 1, 1, 1, 1, 1, 1, &#x27;/&#x27;]]"}, {"fullname": "Algorithms.DpIdpDh.sp", "modulename": "Algorithms.DpIdpDh", "qualname": "sp", "kind": "variable", "doc": "<p>else:\n      for row in range(len_):\n          for col in range(len_):\n              if row != col:\n                  must_increase=0\n                  for k in range(len(r[col])):\n                      must_increase = int(r[col][k]&lt;=r[row][k])\n                      if must_increase==0:\n                          break\n                  dom[row][col]=must_increase\n                  sp[row]+=must_increase</p>\n", "default_value": "[0, 0, 1, 0, 1, 1, 1, 1]"}, {"fullname": "Algorithms.DpIdpDh.calculMatriceDesDominants", "modulename": "Algorithms.DpIdpDh", "qualname": "calculMatriceDesDominants", "kind": "function", "doc": "<p>Calculate the dominance matrix and the skyline points.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>r</strong>:  the relation</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the dominance matrix and the skyline points</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">r</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DpIdpDh.calculGrapheDeCouverture", "modulename": "Algorithms.DpIdpDh", "qualname": "calculGrapheDeCouverture", "kind": "function", "doc": "<p>Calculate the coverage graph of the dominance matrix.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dom</strong>:  the dominance matrix</li>\n<li><strong>sp</strong>:  the skyline points</li>\n<li><strong>display_graph</strong>:  the flag to display the graphS</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the dominance matrix, the skyline points, the total skyline points, the skyline cardinality, and the dominance cardinality</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dom</span>, </span><span class=\"param\"><span class=\"n\">sp</span>, </span><span class=\"param\"><span class=\"n\">display_graph</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DpIdpDh.print_color", "modulename": "Algorithms.DpIdpDh", "qualname": "print_color", "kind": "function", "doc": "<p>Print in the desired color</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>color</strong>:  The color (formatted for colorama) Fore.GREEN / Fore.BLUE etc...</li>\n<li><strong>text</strong>:  The text to display</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">color</span>, </span><span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DpIdpDh.print_green", "modulename": "Algorithms.DpIdpDh", "qualname": "print_green", "kind": "function", "doc": "<p>Print in green</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>text</strong>:  The text to display</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DpIdpDh.print_red", "modulename": "Algorithms.DpIdpDh", "qualname": "print_red", "kind": "function", "doc": "<p>Print in red</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>text</strong>:  The text to display</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DpIdpDh.lm", "modulename": "Algorithms.DpIdpDh", "qualname": "lm", "kind": "function", "doc": "<p>Function to calculate the lm of the skyline points.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dom</strong>:  the dominance matrix</li>\n<li><strong>sky</strong>:  the skyline points</li>\n<li><strong>skyCard</strong>:  the skyline cardinality</li>\n<li><strong>i</strong>:  the index of the skyline point</li>\n<li><strong>prof</strong>:  the current depth</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the skyline points with the lm</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dom</span>, </span><span class=\"param\"><span class=\"n\">sky</span>, </span><span class=\"param\"><span class=\"n\">skyCard</span>, </span><span class=\"param\"><span class=\"n\">i</span>, </span><span class=\"param\"><span class=\"n\">j</span>, </span><span class=\"param\"><span class=\"n\">prof</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DpIdpDh.calculLm", "modulename": "Algorithms.DpIdpDh", "qualname": "calculLm", "kind": "function", "doc": "<p>Calculate the lm of the skyline points.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dom</strong>:  the dominance matrix</li>\n<li><strong>sky</strong>:  the skyline points</li>\n<li><strong>skyCard</strong>:  the skyline cardinality</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the skyline points with the lm</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dom</span>, </span><span class=\"param\"><span class=\"n\">sky</span>, </span><span class=\"param\"><span class=\"n\">skyCard</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DpIdpDh.calculScore", "modulename": "Algorithms.DpIdpDh", "qualname": "calculScore", "kind": "function", "doc": "<p>Calculate the score of the skyline points.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sky</strong>:  the skyline points</li>\n<li><strong>domCard</strong>:  the dominance cardinality</li>\n<li><strong>spTot</strong>:  the total skyline points</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the score of the skyline points</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sky</span>, </span><span class=\"param\"><span class=\"n\">domCard</span>, </span><span class=\"param\"><span class=\"n\">spTot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DpIdpDh.DpIdpDh", "modulename": "Algorithms.DpIdpDh", "qualname": "DpIdpDh", "kind": "class", "doc": "<p>Class to implement the dp-idp-dh algorithm for ranking and sorting data based on multiple criteria.</p>\n"}, {"fullname": "Algorithms.DpIdpDh.DpIdpDh.__init__", "modulename": "Algorithms.DpIdpDh", "qualname": "DpIdpDh.__init__", "kind": "function", "doc": "<p>Constructor to initialize the dp-idp-dh algorithm.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>r</strong>:  the relation</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">r</span></span>)</span>"}, {"fullname": "Algorithms.DpIdpDh.DpIdpDh.r", "modulename": "Algorithms.DpIdpDh", "qualname": "DpIdpDh.r", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.DpIdpDh.DpIdpDh.time", "modulename": "Algorithms.DpIdpDh", "qualname": "DpIdpDh.time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.DpIdpDh.DpIdpDh.run", "modulename": "Algorithms.DpIdpDh", "qualname": "DpIdpDh.run", "kind": "function", "doc": "<p>Run the dp-idp-dh algorithm to compute the ranking and sorting of data based on multiple criteria.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DpIdpDh.DpIdpDh.calculMatriceDesDominants", "modulename": "Algorithms.DpIdpDh", "qualname": "DpIdpDh.calculMatriceDesDominants", "kind": "function", "doc": "<p>Calculate the dominance matrix and the skyline points.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>r</strong>:  the relation</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the dominance matrix and the skyline points</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">r</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DpIdpDh.DpIdpDh.calculGrapheDeCouverture", "modulename": "Algorithms.DpIdpDh", "qualname": "DpIdpDh.calculGrapheDeCouverture", "kind": "function", "doc": "<p>Calculate the coverage graph of the dominance matrix.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dom</strong>:  the dominance matrix</li>\n<li><strong>sp</strong>:  the skyline points</li>\n<li><strong>display_graph</strong>:  flag to display the graph</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the dominance matrix, the skyline points, the total skyline points, the skyline cardinality, and the dominance cardinality</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dom</span>, </span><span class=\"param\"><span class=\"n\">sp</span>, </span><span class=\"param\"><span class=\"n\">display_graph</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DpIdpDh.DpIdpDh.calculGrapheDeCouverture1", "modulename": "Algorithms.DpIdpDh", "qualname": "DpIdpDh.calculGrapheDeCouverture1", "kind": "function", "doc": "<p>Calculate the coverage graph of the dominance matrix.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dom</strong>:  the dominance matrix</li>\n<li><strong>sp</strong>:  the skyline points</li>\n<li><strong>display_graph</strong>:  flag to display the graph</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the dominance matrix, the skyline points, the total skyline points, the skyline cardinality, and the dominance cardinality</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dom</span>, </span><span class=\"param\"><span class=\"n\">sp</span>, </span><span class=\"param\"><span class=\"n\">display_graph</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DpIdpDh.DpIdpDh.lm_jf", "modulename": "Algorithms.DpIdpDh", "qualname": "DpIdpDh.lm_jf", "kind": "function", "doc": "<p>Function to calculate the lm of the skyline points using a stack instead of recursion.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dom</strong>:  the dominance matrix</li>\n<li><strong>sky</strong>:  the skyline points</li>\n<li><strong>skyCard</strong>:  the skyline cardinality</li>\n<li><strong>i</strong>:  the index of the skyline point</li>\n<li><strong>j</strong>:  the index of the skyline point</li>\n<li><strong>prof</strong>:  the current depth</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the skyline points with the lm</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dom</span>, </span><span class=\"param\"><span class=\"n\">sky</span>, </span><span class=\"param\"><span class=\"n\">skyCard</span>, </span><span class=\"param\"><span class=\"n\">i</span>, </span><span class=\"param\"><span class=\"n\">j</span>, </span><span class=\"param\"><span class=\"n\">prof</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DpIdpDh.DpIdpDh.lm", "modulename": "Algorithms.DpIdpDh", "qualname": "DpIdpDh.lm", "kind": "function", "doc": "<p>Recursive function to calculate and update the dominance levels (lm)\nof skyline points.</p>\n\n<p>When a point j is dominated by another point k, this function updates\nthe 'sky' structure and decrements the corresponding cardinality.\nThe update is propagated recursively with an incremented dominance level.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dom</strong>:  list[list[bool]] - dominance matrix (dom[k][j] == True means k dominates j)</li>\n<li><strong>sky</strong>:  dict - structure representing the skyline points</li>\n<li><strong>skyCard</strong>:  dict - dictionary containing the remaining dominance count for each point</li>\n<li><strong>i</strong>:  int - index of the current point being processed in sky</li>\n<li><strong>j</strong>:  int - target index in sky</li>\n<li><strong>prof</strong>:  int - current dominance level\n:yield: dict - updated version of the sky structure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dom</span>, </span><span class=\"param\"><span class=\"n\">sky</span>, </span><span class=\"param\"><span class=\"n\">skyCard</span>, </span><span class=\"param\"><span class=\"n\">i</span>, </span><span class=\"param\"><span class=\"n\">j</span>, </span><span class=\"param\"><span class=\"n\">prof</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DpIdpDh.DpIdpDh.calculLm", "modulename": "Algorithms.DpIdpDh", "qualname": "DpIdpDh.calculLm", "kind": "function", "doc": "<p>Initializes and calls the 'lm' function for each point in the skyline.\nUpdates the sky structure incrementally using intermediate results from 'lm'.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dom</strong>:  list[list[bool]] - dominance matrix</li>\n<li><strong>sky</strong>:  dict - skyline point structure</li>\n<li><strong>skyCard</strong>:  dict - remaining dominance count for each point</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict - final updated sky structure</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dom</span>, </span><span class=\"param\"><span class=\"n\">sky</span>, </span><span class=\"param\"><span class=\"n\">skyCard</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DpIdpDh.DpIdpDh.calculLm1", "modulename": "Algorithms.DpIdpDh", "qualname": "DpIdpDh.calculLm1", "kind": "function", "doc": "<p>Alternative version of 'calculLm' that calls 'lm' but returns the generator\ndirectly instead of consuming it. This version does NOT process the yielded values,\nwhich may lead to unexpected results.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dom</strong>:  list[list[bool]] - dominance matrix</li>\n<li><strong>sky</strong>:  dict - skyline point structure</li>\n<li><strong>skyCard</strong>:  dict - remaining dominance count for each point</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>generator - the generator returned by 'lm'</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dom</span>, </span><span class=\"param\"><span class=\"n\">sky</span>, </span><span class=\"param\"><span class=\"n\">skyCard</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DpIdpDh.DpIdpDh.calculScore", "modulename": "Algorithms.DpIdpDh", "qualname": "DpIdpDh.calculScore", "kind": "function", "doc": "<p>Calculates a score for each skyline entry based on dominance levels and frequency.</p>\n\n<p>The score is computed as a sum over all dimensions where the skyline value &gt; 0:\n(1 / level) * log10(total support / cardinality of dominators)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sky: dict - skyline structure (matrix-like</strong>:  sky[i][j] gives dominance level of j for skyline i)</li>\n<li><strong>domCard</strong>:  dict - number of dominators for each point</li>\n<li><strong>spTot</strong>:  int - total number of support points</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict - scores per skyline index</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sky</span>, </span><span class=\"param\"><span class=\"n\">domCard</span>, </span><span class=\"param\"><span class=\"n\">spTot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DpIdpDh.DpIdpDh.sort", "modulename": "Algorithms.DpIdpDh", "qualname": "DpIdpDh.sort", "kind": "function", "doc": "<p>Sorts the internal score dictionary in ascending or descending order.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rev</strong>:  str - sorting order, either \"Asc\" or \"Desc\"</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rev</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.DpIdpDh.dpIdpAvecHierarchieDeDominance", "modulename": "Algorithms.DpIdpDh", "qualname": "dpIdpAvecHierarchieDeDominance", "kind": "function", "doc": "<p>Demonstration of skyline processing using dominance hierarchy.</p>\n\n<p>This function performs the following steps:</p>\n\n<ol>\n<li>Constructs a set of items with 3D values.</li>\n<li>Computes the dominance matrix.</li>\n<li>Builds the skyline graph.</li>\n<li>Computes the dominance levels (lm).</li>\n<li>Calculates scores for each skyline node.</li>\n<li>Displays results at each step.</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.RankSky", "modulename": "Algorithms.RankSky", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Algorithms.RankSky.RankSky", "modulename": "Algorithms.RankSky", "qualname": "RankSky", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "Algorithms.RankSky.RankSky.__init__", "modulename": "Algorithms.RankSky", "qualname": "RankSky.__init__", "kind": "function", "doc": "<p>Constructor for the RankSky class.</p>\n\n<p>Initializes the RankSky ranking process using skyline computation and PageRank.\nIt prepares the input data, unifies preferences, computes the skyline, and triggers\nmatrix construction and scoring.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rTuple: dict - the input relation as a dictionary of tuples (for exemple : {1</strong>:  (val1, val2, ...), ...})</li>\n<li><strong>pref</strong>:  list[Preference] - a list of Preference enums (MIN or MAX) corresponding to each dimension</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rTuple</span>, </span><span class=\"param\"><span class=\"n\">pref</span></span>)</span>"}, {"fullname": "Algorithms.RankSky.RankSky.rTupleInit", "modulename": "Algorithms.RankSky", "qualname": "RankSky.rTupleInit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.RankSky.RankSky.prefInit", "modulename": "Algorithms.RankSky", "qualname": "RankSky.prefInit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.RankSky.RankSky.r", "modulename": "Algorithms.RankSky", "qualname": "RankSky.r", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.RankSky.RankSky.rUnifyTab", "modulename": "Algorithms.RankSky", "qualname": "RankSky.rUnifyTab", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.RankSky.RankSky.pref", "modulename": "Algorithms.RankSky", "qualname": "RankSky.pref", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.RankSky.RankSky.rTupleNv", "modulename": "Algorithms.RankSky", "qualname": "RankSky.rTupleNv", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.RankSky.RankSky.sky", "modulename": "Algorithms.RankSky", "qualname": "RankSky.sky", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.RankSky.RankSky.rm", "modulename": "Algorithms.RankSky", "qualname": "RankSky.rm", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.RankSky.RankSky.rt", "modulename": "Algorithms.RankSky", "qualname": "RankSky.rt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.RankSky.RankSky.a", "modulename": "Algorithms.RankSky", "qualname": "RankSky.a", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.RankSky.RankSky.s", "modulename": "Algorithms.RankSky", "qualname": "RankSky.s", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.RankSky.RankSky.n", "modulename": "Algorithms.RankSky", "qualname": "RankSky.n", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.RankSky.RankSky.g", "modulename": "Algorithms.RankSky", "qualname": "RankSky.g", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.RankSky.RankSky.vk", "modulename": "Algorithms.RankSky", "qualname": "RankSky.vk", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.RankSky.RankSky.alpha", "modulename": "Algorithms.RankSky", "qualname": "RankSky.alpha", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.RankSky.RankSky.score", "modulename": "Algorithms.RankSky", "qualname": "RankSky.score", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.RankSky.RankSky.time", "modulename": "Algorithms.RankSky", "qualname": "RankSky.time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.RankSky.RankSky.unifyPreferencesMax", "modulename": "Algorithms.RankSky", "qualname": "RankSky.unifyPreferencesMax", "kind": "function", "doc": "<p>Converts all preferences in the relation to MAX by inverting MIN dimensions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>r</strong>:  dict - the relation data to modify (values are updated in place)</li>\n<li><strong>pref</strong>:  list[Preference] - list of current preferences, which will be updated to MAX</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">r</span>, </span><span class=\"param\"><span class=\"n\">pref</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.RankSky.RankSky.unifyPreferencesMin", "modulename": "Algorithms.RankSky", "qualname": "RankSky.unifyPreferencesMin", "kind": "function", "doc": "<p>Converts all preferences in the relation to MIN by inverting MAX dimensions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>r</strong>:  dict - the relation data to modify (values are updated in place)</li>\n<li><strong>pref</strong>:  list[Preference] - list of current preferences, which will be updated to MIN</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">r</span>, </span><span class=\"param\"><span class=\"n\">pref</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.RankSky.RankSky.tupleToTab", "modulename": "Algorithms.RankSky", "qualname": "RankSky.tupleToTab", "kind": "function", "doc": "<p>Converts all tuple values in the relation dictionary to lists.</p>\n\n<p>This is used to allow in-place modification of the data (since lists are mutable,\nunlike tuples).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rTuple</strong>:  dict - the relation dictionary with tuple values to be converted</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rTuple</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.RankSky.RankSky.tabToTuple", "modulename": "Algorithms.RankSky", "qualname": "RankSky.tabToTuple", "kind": "function", "doc": "<p>Converts all list values in the relation dictionary back to tuples.</p>\n\n<p>This is typically used after data processing to restore the original tuple format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rTab</strong>:  dict - the relation dictionary with list values to be converted</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rTab</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.RankSky.RankSky.initMatrix", "modulename": "Algorithms.RankSky", "qualname": "RankSky.initMatrix", "kind": "function", "doc": "<p>Initializes the relation matrix (self.rm) from the current skyline.</p>\n\n<p>It extracts the list of values for each skyline point and builds a matrix\nrepresentation for further processing (exemple : matrix multiplication).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.RankSky.RankSky.skylineComputation", "modulename": "Algorithms.RankSky", "qualname": "RankSky.skylineComputation", "kind": "function", "doc": "<p>Computes the skyline of the current dataset using the BBS (Branch and Bound Skyline) algorithm.</p>\n\n<p>The result is stored in self.sky as a dictionary of non-dominated tuples.\nThis is a key step before performing any ranking or PageRank-based processing.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.RankSky.RankSky.squareMatrix", "modulename": "Algorithms.RankSky", "qualname": "RankSky.squareMatrix", "kind": "function", "doc": "<p>Constructs the square matrix used for ranking.</p>\n\n<p>It transposes the relation matrix (self.rm), then multiplies the original\nmatrix with its transpose to form a square similarity matrix (self.a),\nwhich will later be used to compute the stochastic matrix.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.RankSky.RankSky.stochasticMatrix", "modulename": "Algorithms.RankSky", "qualname": "RankSky.stochasticMatrix", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.RankSky.RankSky.googlePageRank", "modulename": "Algorithms.RankSky", "qualname": "RankSky.googlePageRank", "kind": "function", "doc": "<p>Constructs the Google PageRank matrix (self.g) from the stochastic matrix (self.s).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.RankSky.RankSky.Ipl", "modulename": "Algorithms.RankSky", "qualname": "RankSky.Ipl", "kind": "function", "doc": "<p>Computes the PageRank vector using the Ipl method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>p</strong>:  int - precision for convergence (default is 3)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">p</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.RankSky.RankSky.IplDom", "modulename": "Algorithms.RankSky", "qualname": "RankSky.IplDom", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">p</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.RankSky.RankSky.sort", "modulename": "Algorithms.RankSky", "qualname": "RankSky.sort", "kind": "function", "doc": "<p>Sorts the score vector based on the last column of the matrix which is the score.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rev</strong>:  str - \"Asc\" for ascending order, \"Desc\" for descending order, default is \"Desc\"</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rev</span><span class=\"o\">=</span><span class=\"s1\">&#39;Desc&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.RankSky.RankSky.printOutcomes", "modulename": "Algorithms.RankSky", "qualname": "RankSky.printOutcomes", "kind": "function", "doc": "<p>Prints the outcomes of the ranking process, including the skyline matrix,</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.RankSky.RankSky.run", "modulename": "Algorithms.RankSky", "qualname": "RankSky.run", "kind": "function", "doc": "<p>Executes the entire ranking process, including skyline computation, including a timer for performance measurement.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.SkyIR", "modulename": "Algorithms.SkyIR", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Algorithms.SkyIR.SkyIR", "modulename": "Algorithms.SkyIR", "qualname": "SkyIR", "kind": "class", "doc": "<p>Algorithm about SkyIR</p>\n"}, {"fullname": "Algorithms.SkyIR.SkyIR.__init__", "modulename": "Algorithms.SkyIR", "qualname": "SkyIR.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">r</span></span>)</span>"}, {"fullname": "Algorithms.SkyIR.SkyIR.r", "modulename": "Algorithms.SkyIR", "qualname": "SkyIR.r", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.SkyIR.SkyIR.time", "modulename": "Algorithms.SkyIR", "qualname": "SkyIR.time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.SkyIR.SkyIR.calculSkylineEtNbDominants", "modulename": "Algorithms.SkyIR", "qualname": "SkyIR.calculSkylineEtNbDominants", "kind": "function", "doc": "<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.SkyIR.SkyIR.upperBound", "modulename": "Algorithms.SkyIR", "qualname": "SkyIR.upperBound", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">poi</span>, </span><span class=\"param\"><span class=\"n\">minIdp</span>, </span><span class=\"param\"><span class=\"n\">layer</span>, </span><span class=\"param\"><span class=\"n\">pending</span>, </span><span class=\"param\"><span class=\"n\">gamma</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.SkyIR.SkyIR.nextLayer", "modulename": "Algorithms.SkyIR", "qualname": "SkyIR.nextLayer", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">poi</span>, </span><span class=\"param\"><span class=\"n\">rLayer</span>, </span><span class=\"param\"><span class=\"n\">sLayer</span>, </span><span class=\"param\"><span class=\"n\">layer</span>, </span><span class=\"param\"><span class=\"n\">minIdp</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.SkyIR.SkyIR.updateScore", "modulename": "Algorithms.SkyIR", "qualname": "SkyIR.updateScore", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">poi</span>, </span><span class=\"param\"><span class=\"n\">lm</span>, </span><span class=\"param\"><span class=\"n\">minIdp</span>, </span><span class=\"param\"><span class=\"n\">spTot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.SkyIR.SkyIR.insererTrie", "modulename": "Algorithms.SkyIR", "qualname": "SkyIR.insererTrie", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">topkLbl</span>, </span><span class=\"param\"><span class=\"n\">topk</span>, </span><span class=\"param\"><span class=\"n\">poi</span>, </span><span class=\"param\"><span class=\"n\">score</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.SkyIR.SkyIR.skyIR", "modulename": "Algorithms.SkyIR", "qualname": "SkyIR.skyIR", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">k</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.SkyIR_old", "modulename": "Algorithms.SkyIR_old", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Algorithms.SkyIR_old.SkyIR", "modulename": "Algorithms.SkyIR_old", "qualname": "SkyIR", "kind": "class", "doc": "<p>Algorithm about SkyIR</p>\n"}, {"fullname": "Algorithms.SkyIR_old.SkyIR.__init__", "modulename": "Algorithms.SkyIR_old", "qualname": "SkyIR.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">r</span></span>)</span>"}, {"fullname": "Algorithms.SkyIR_old.SkyIR.r", "modulename": "Algorithms.SkyIR_old", "qualname": "SkyIR.r", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.SkyIR_old.SkyIR.calculSkylineEtNbDominants", "modulename": "Algorithms.SkyIR_old", "qualname": "SkyIR.calculSkylineEtNbDominants", "kind": "function", "doc": "<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.SkyIR_old.SkyIR.upperBound", "modulename": "Algorithms.SkyIR_old", "qualname": "SkyIR.upperBound", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">poi</span>, </span><span class=\"param\"><span class=\"n\">minIdp</span>, </span><span class=\"param\"><span class=\"n\">layer</span>, </span><span class=\"param\"><span class=\"n\">pending</span>, </span><span class=\"param\"><span class=\"n\">gamma</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.SkyIR_old.SkyIR.nextLayer", "modulename": "Algorithms.SkyIR_old", "qualname": "SkyIR.nextLayer", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">poi</span>, </span><span class=\"param\"><span class=\"n\">rLayer</span>, </span><span class=\"param\"><span class=\"n\">sLayer</span>, </span><span class=\"param\"><span class=\"n\">layer</span>, </span><span class=\"param\"><span class=\"n\">minIdp</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.SkyIR_old.SkyIR.updateScore", "modulename": "Algorithms.SkyIR_old", "qualname": "SkyIR.updateScore", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">poi</span>, </span><span class=\"param\"><span class=\"n\">lm</span>, </span><span class=\"param\"><span class=\"n\">minIdp</span>, </span><span class=\"param\"><span class=\"n\">spTot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.SkyIR_old.SkyIR.insererTrie", "modulename": "Algorithms.SkyIR_old", "qualname": "SkyIR.insererTrie", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">topkLbl</span>, </span><span class=\"param\"><span class=\"n\">topk</span>, </span><span class=\"param\"><span class=\"n\">poi</span>, </span><span class=\"param\"><span class=\"n\">score</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.SkyIR_old.SkyIR.skyIR", "modulename": "Algorithms.SkyIR_old", "qualname": "SkyIR.skyIR", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">k</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.SkyIR_old2", "modulename": "Algorithms.SkyIR_old2", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Algorithms.SkyIR_old2.SkyIR", "modulename": "Algorithms.SkyIR_old2", "qualname": "SkyIR", "kind": "class", "doc": "<p>Algorithm about SkyIR</p>\n"}, {"fullname": "Algorithms.SkyIR_old2.SkyIR.__init__", "modulename": "Algorithms.SkyIR_old2", "qualname": "SkyIR.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">r</span></span>)</span>"}, {"fullname": "Algorithms.SkyIR_old2.SkyIR.r", "modulename": "Algorithms.SkyIR_old2", "qualname": "SkyIR.r", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Algorithms.SkyIR_old2.SkyIR.calculSkylineEtNbDominants", "modulename": "Algorithms.SkyIR_old2", "qualname": "SkyIR.calculSkylineEtNbDominants", "kind": "function", "doc": "<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.SkyIR_old2.SkyIR.upperBound", "modulename": "Algorithms.SkyIR_old2", "qualname": "SkyIR.upperBound", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">poi</span>, </span><span class=\"param\"><span class=\"n\">minIdp</span>, </span><span class=\"param\"><span class=\"n\">layer</span>, </span><span class=\"param\"><span class=\"n\">pending</span>, </span><span class=\"param\"><span class=\"n\">gamma</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.SkyIR_old2.SkyIR.nextLayer", "modulename": "Algorithms.SkyIR_old2", "qualname": "SkyIR.nextLayer", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">poi</span>, </span><span class=\"param\"><span class=\"n\">rLayer</span>, </span><span class=\"param\"><span class=\"n\">sLayer</span>, </span><span class=\"param\"><span class=\"n\">layer</span>, </span><span class=\"param\"><span class=\"n\">minIdp</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.SkyIR_old2.SkyIR.updateScore", "modulename": "Algorithms.SkyIR_old2", "qualname": "SkyIR.updateScore", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">poi</span>, </span><span class=\"param\"><span class=\"n\">lm</span>, </span><span class=\"param\"><span class=\"n\">minIdp</span>, </span><span class=\"param\"><span class=\"n\">spTot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.SkyIR_old2.SkyIR.insererTrie", "modulename": "Algorithms.SkyIR_old2", "qualname": "SkyIR.insererTrie", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">topkLbl</span>, </span><span class=\"param\"><span class=\"n\">topk</span>, </span><span class=\"param\"><span class=\"n\">poi</span>, </span><span class=\"param\"><span class=\"n\">score</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Algorithms.SkyIR_old2.SkyIR.skyIR", "modulename": "Algorithms.SkyIR_old2", "qualname": "SkyIR.skyIR", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">k</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Database", "modulename": "Database", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Database.DatabaseHelpers", "modulename": "Database.DatabaseHelpers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Database.DatabaseHelpers.Database", "modulename": "Database.DatabaseHelpers", "qualname": "Database", "kind": "class", "doc": "<p>Class to manage an SQLite database: creation, insertion, selection and random data generation.</p>\n"}, {"fullname": "Database.DatabaseHelpers.Database.__init__", "modulename": "Database.DatabaseHelpers", "qualname": "Database.__init__", "kind": "function", "doc": "<p>Initialize the database connection and create a table if needed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_filepath</strong>:  Path to the SQLite database file.</li>\n<li><strong>col_len</strong>:  Number of columns for the table (default 9).</li>\n<li><strong>row_len</strong>:  Number of random rows to insert (optional).</li>\n<li><strong>is_debug</strong>:  Enable or disable debug mode.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db_filepath</span>, </span><span class=\"param\"><span class=\"n\">col_len</span><span class=\"o\">=</span><span class=\"mi\">9</span>, </span><span class=\"param\"><span class=\"n\">row_len</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">is_debug</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "Database.DatabaseHelpers.Database.is_debug", "modulename": "Database.DatabaseHelpers", "qualname": "Database.is_debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Database.DatabaseHelpers.Database.relations", "modulename": "Database.DatabaseHelpers", "qualname": "Database.relations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Database.DatabaseHelpers.Database.conn", "modulename": "Database.DatabaseHelpers", "qualname": "Database.conn", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Database.DatabaseHelpers.Database.cursor", "modulename": "Database.DatabaseHelpers", "qualname": "Database.cursor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Database.DatabaseHelpers.Database.table_name", "modulename": "Database.DatabaseHelpers", "qualname": "Database.table_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Database.DatabaseHelpers.Database.colonnes_initiales_str", "modulename": "Database.DatabaseHelpers", "qualname": "Database.colonnes_initiales_str", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Database.DatabaseHelpers.Database.create_table_query_str", "modulename": "Database.DatabaseHelpers", "qualname": "Database.create_table_query_str", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Database.DatabaseHelpers.Database.colonne_names", "modulename": "Database.DatabaseHelpers", "qualname": "Database.colonne_names", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Database.DatabaseHelpers.Database.get_column_names", "modulename": "Database.DatabaseHelpers", "qualname": "Database.get_column_names", "kind": "function", "doc": "<p>Retrieve the column names from the table.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nom_table</strong>:  Name of the table.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List of column names.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nom_table</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Database.DatabaseHelpers.Database.nombre_colonnes_table", "modulename": "Database.DatabaseHelpers", "qualname": "Database.nombre_colonnes_table", "kind": "function", "doc": "<p>Get the number of columns in the table.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nom_table</strong>:  Table name (optional).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Number of columns.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nom_table</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Database.DatabaseHelpers.Database.create_table", "modulename": "Database.DatabaseHelpers", "qualname": "Database.create_table", "kind": "function", "doc": "<p>Create the table from the provided SQL query.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sql_query</strong>:  SQL query to create the table.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Boolean indicating success or failure.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sql_query</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Database.DatabaseHelpers.Database.select_by_id", "modulename": "Database.DatabaseHelpers", "qualname": "Database.select_by_id", "kind": "function", "doc": "<p>Select a record by its RowId.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>row_id</strong>:  RowId to search.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Selected record(s).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">row_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Database.DatabaseHelpers.Database.select_all_for_check_max", "modulename": "Database.DatabaseHelpers", "qualname": "Database.select_all_for_check_max", "kind": "function", "doc": "<p>Select all entries that do not respect predefined rules.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List of invalid records.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Database.DatabaseHelpers.Database.select_all_until_id", "modulename": "Database.DatabaseHelpers", "qualname": "Database.select_all_until_id", "kind": "function", "doc": "<p>Select records until a specific RowId.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>until_id</strong>:  The maximum RowId.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">until_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Database.DatabaseHelpers.Database.select_all", "modulename": "Database.DatabaseHelpers", "qualname": "Database.select_all", "kind": "function", "doc": "<p>Select all rows in the table.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>All records.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Database.DatabaseHelpers.Database.select_by_rarete", "modulename": "Database.DatabaseHelpers", "qualname": "Database.select_by_rarete", "kind": "function", "doc": "<p>Select rows by rarity.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rarete</strong>:  Rarity value.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Records matching rarity.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rarete</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Database.DatabaseHelpers.Database.select_by_duree", "modulename": "Database.DatabaseHelpers", "qualname": "Database.select_by_duree", "kind": "function", "doc": "<p>Select rows by duration.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>duree</strong>:  Duration value.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Records matching duration.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">duree</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Database.DatabaseHelpers.Database.select_by_victoire", "modulename": "Database.DatabaseHelpers", "qualname": "Database.select_by_victoire", "kind": "function", "doc": "<p>Select rows by victory.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>victoire</strong>:  Victory value.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Records matching victory.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">victoire</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Database.DatabaseHelpers.Database.generer_table", "modulename": "Database.DatabaseHelpers", "qualname": "Database.generer_table", "kind": "function", "doc": "<p>Generate a SQL query to create a table with a given number of random columns.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n_rnd_cols</strong>:  Number of columns to create.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>SQL CREATE TABLE query.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n_rnd_cols</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Database.DatabaseHelpers.Database.generate_random_tuples", "modulename": "Database.DatabaseHelpers", "qualname": "Database.generate_random_tuples", "kind": "function", "doc": "<p>Generate a list of n random tuples for basic columns (Rarete, Duree, Victoire).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n</strong>:  Number of tuples to generate.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List of tuples.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Database.DatabaseHelpers.Database.generate_random_tuples_for_all_columns", "modulename": "Database.DatabaseHelpers", "qualname": "Database.generate_random_tuples_for_all_columns", "kind": "function", "doc": "<p>Generate random tuples for all columns of the table.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n</strong>:  Number of tuples to generate.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List of tuples.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Database.DatabaseHelpers.Database.insert_random_tuples", "modulename": "Database.DatabaseHelpers", "qualname": "Database.insert_random_tuples", "kind": "function", "doc": "<p>Insert random tuples into the database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n</strong>:  Number of tuples to generate and insert.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Boolean indicating success.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Database.SqlDataMocker", "modulename": "Database.SqlDataMocker", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Database.SqlDataMocker.SqlDataMocker", "modulename": "Database.SqlDataMocker", "qualname": "SqlDataMocker", "kind": "class", "doc": "<p>Class that mocks (generates) a subset of data from an SQL database,\nselecting a specific number of columns and rows.</p>\n"}, {"fullname": "Database.SqlDataMocker.SqlDataMocker.__init__", "modulename": "Database.SqlDataMocker", "qualname": "SqlDataMocker.__init__", "kind": "function", "doc": "<p>Constructor for the SqlDataMocker.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>col_count</strong>:  Number of columns to retrieve from the database.</li>\n<li><strong>row_count</strong>:  Number of rows to retrieve from the database.</li>\n<li><strong>filepath</strong>:  Path to the database file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">col_count</span>, </span><span class=\"param\"><span class=\"n\">row_count</span>, </span><span class=\"param\"><span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"s1\">&#39;../Assets/pokemon.db&#39;</span></span>)</span>"}, {"fullname": "Database.SqlDataMocker.SqlDataMocker.col_count", "modulename": "Database.SqlDataMocker", "qualname": "SqlDataMocker.col_count", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Database.SqlDataMocker.SqlDataMocker.row_count", "modulename": "Database.SqlDataMocker", "qualname": "SqlDataMocker.row_count", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Database.SqlDataMocker.SqlDataMocker.filepath", "modulename": "Database.SqlDataMocker", "qualname": "SqlDataMocker.filepath", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Database.SqlDataMocker.SqlDataMocker.run", "modulename": "Database.SqlDataMocker", "qualname": "SqlDataMocker.run", "kind": "function", "doc": "<p>Connects to the database, retrieves the required subset of data,\nand converts it to a dictionary.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dictionary where keys are row IDs and values are tuples of column data.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils", "modulename": "Utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.ComputerStats", "modulename": "Utils.ComputerStats", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.ComputerStats.display_pc_stats", "modulename": "Utils.ComputerStats", "qualname": "display_pc_stats", "kind": "function", "doc": "<p>Display detailed statistics about the PC hardware, including RAM, CPU, and GPU information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier", "modulename": "Utils.DataModifier", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DataConverter", "modulename": "Utils.DataModifier.DataConverter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DataConverter.DataConverter", "modulename": "Utils.DataModifier.DataConverter", "qualname": "DataConverter", "kind": "class", "doc": "<p>Utility class for converting data between JSON files, Python dictionaries (relations),\nand SQLite databases using a standardized table format (named 'Pokemon').</p>\n\n<p>Supported conversions:</p>\n\n<ul>\n<li>JSON \u2192 SQLite</li>\n<li>Dictionary \u2192 SQLite</li>\n<li>JSON \u2192 Python dict</li>\n<li>SQLite \u2192 Python dict</li>\n</ul>\n"}, {"fullname": "Utils.DataModifier.DataConverter.DataConverter.__init__", "modulename": "Utils.DataModifier.DataConverter", "qualname": "DataConverter.__init__", "kind": "function", "doc": "<p>Initialize the converter.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source</strong>:  Either a path to a JSON or SQLite file, or a Python dictionary (relation).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">source</span></span>)</span>"}, {"fullname": "Utils.DataModifier.DataConverter.DataConverter.source", "modulename": "Utils.DataModifier.DataConverter", "qualname": "DataConverter.source", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DataConverter.DataConverter.jsonToDb", "modulename": "Utils.DataModifier.DataConverter", "qualname": "DataConverter.jsonToDb", "kind": "function", "doc": "<p>Convert a JSON file into a SQLite database.\nThe JSON should represent a dictionary of tuples/lists.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_path</strong>:  Output path of the SQLite database file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;../Assets/AlgoExecution/DbFiles/TestExecution.db&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.DataConverter.DataConverter.relationToDb", "modulename": "Utils.DataModifier.DataConverter", "qualname": "DataConverter.relationToDb", "kind": "function", "doc": "<p>Convert a Python dictionary (relation) into a SQLite database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_path</strong>:  Output path of the SQLite database file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;../Assets/AlgoExecution/DbFiles/TestExecution.db&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.DataConverter.DataConverter.jsonToRelation", "modulename": "Utils.DataModifier.DataConverter", "qualname": "DataConverter.jsonToRelation", "kind": "function", "doc": "<p>Convert a JSON file into a Python dictionary.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dictionary {id: tuple}</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.DataConverter.DataConverter.dbToRelation", "modulename": "Utils.DataModifier.DataConverter", "qualname": "DataConverter.dbToRelation", "kind": "function", "doc": "<p>Convert a SQLite database table 'Pokemon' into a Python dictionary.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dictionary {id: tuple of attribute values}</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.DataNormalizerDeepSky", "modulename": "Utils.DataModifier.DataNormalizerDeepSky", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DataNormalizerDeepSky.DataNormalizerDeepSky", "modulename": "Utils.DataModifier.DataNormalizerDeepSky", "qualname": "DataNormalizerDeepSky", "kind": "class", "doc": "<p>A utility class to normalize and manipulate relations (datasets)\nstored either in a database file or JSON file format.</p>\n"}, {"fullname": "Utils.DataModifier.DataNormalizerDeepSky.DataNormalizerDeepSky.__init__", "modulename": "Utils.DataModifier.DataNormalizerDeepSky", "qualname": "DataNormalizerDeepSky.__init__", "kind": "function", "doc": "<p>Initialize the DataNormalizerDeepSky.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>r</strong>:  A relation represented as a dictionary (key -> tuple of values).</li>\n<li><strong>fp</strong>:  Path to the database or JSON file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">r</span>, </span><span class=\"param\"><span class=\"n\">fp</span></span>)</span>"}, {"fullname": "Utils.DataModifier.DataNormalizerDeepSky.DataNormalizerDeepSky.relation", "modulename": "Utils.DataModifier.DataNormalizerDeepSky", "qualname": "DataNormalizerDeepSky.relation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DataNormalizerDeepSky.DataNormalizerDeepSky.filepath", "modulename": "Utils.DataModifier.DataNormalizerDeepSky", "qualname": "DataNormalizerDeepSky.filepath", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DataNormalizerDeepSky.DataNormalizerDeepSky.conn", "modulename": "Utils.DataModifier.DataNormalizerDeepSky", "qualname": "DataNormalizerDeepSky.conn", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DataNormalizerDeepSky.DataNormalizerDeepSky.cursor", "modulename": "Utils.DataModifier.DataNormalizerDeepSky", "qualname": "DataNormalizerDeepSky.cursor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DataNormalizerDeepSky.DataNormalizerDeepSky.tableName", "modulename": "Utils.DataModifier.DataNormalizerDeepSky", "qualname": "DataNormalizerDeepSky.tableName", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DataNormalizerDeepSky.DataNormalizerDeepSky.fpToRelation", "modulename": "Utils.DataModifier.DataNormalizerDeepSky", "qualname": "DataNormalizerDeepSky.fpToRelation", "kind": "function", "doc": "<p>Convert the database into a relation (dictionary format).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.DataNormalizerDeepSky.DataNormalizerDeepSky.jsonToRelation", "modulename": "Utils.DataModifier.DataNormalizerDeepSky", "qualname": "DataNormalizerDeepSky.jsonToRelation", "kind": "function", "doc": "<p>Convert a JSON file into a relation (dictionary format).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.DataNormalizerDeepSky.DataNormalizerDeepSky.deleteLineDb", "modulename": "Utils.DataModifier.DataNormalizerDeepSky", "qualname": "DataNormalizerDeepSky.deleteLineDb", "kind": "function", "doc": "<p>Delete a specific row from the database based on its RowId.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>line</strong>:  The RowId of the line to delete.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">line</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.DataNormalizerDeepSky.DataNormalizerDeepSky.addLinesDb", "modulename": "Utils.DataModifier.DataNormalizerDeepSky", "qualname": "DataNormalizerDeepSky.addLinesDb", "kind": "function", "doc": "<p>Add multiple rows to the database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lines</strong>:  A list of lines to insert, where each line is a tuple.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lines</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.DataNormalizerDeepSky.DataNormalizerDeepSky.refreshDb", "modulename": "Utils.DataModifier.DataNormalizerDeepSky", "qualname": "DataNormalizerDeepSky.refreshDb", "kind": "function", "doc": "<p>Overwrite and refresh the database content with the current relation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.DataNormalizerDeepSky.DataNormalizerDeepSky.beautyPrintDict", "modulename": "Utils.DataModifier.DataNormalizerDeepSky", "qualname": "DataNormalizerDeepSky.beautyPrintDict", "kind": "function", "doc": "<p>Nicely print a full dictionary with its keys and values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>r</strong>:  The dictionary to print.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">r</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.DataNormalizerDeepSky.DataNormalizerDeepSky.beautyPrintSkylinePoint", "modulename": "Utils.DataModifier.DataNormalizerDeepSky", "qualname": "DataNormalizerDeepSky.beautyPrintSkylinePoint", "kind": "function", "doc": "<p>Nicely print the keys of a dictionary representing skyline points.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>r</strong>:  The dictionary containing skyline points.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">r</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.DataNormalizerDeepSky.DataNormalizerDeepSky.sortArr", "modulename": "Utils.DataModifier.DataNormalizerDeepSky", "qualname": "DataNormalizerDeepSky.sortArr", "kind": "function", "doc": "<p>Sort an array in ascending order (modifies the array in-place).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arr</strong>:  The list to sort.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The sorted list (same object).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.DataUnifier", "modulename": "Utils.DataModifier.DataUnifier", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DataUnifier.DataUnifier", "modulename": "Utils.DataModifier.DataUnifier", "qualname": "DataUnifier", "kind": "class", "doc": "<p>This class is used to unify data with given preferences.</p>\n"}, {"fullname": "Utils.DataModifier.DataUnifier.DataUnifier.__init__", "modulename": "Utils.DataModifier.DataUnifier", "qualname": "DataUnifier.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong>:  the data to be unified can be a dictionary, JSON or database object</li>\n<li><strong>preferences</strong>:  the preferences to be used for unifying the data</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">preferences</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;auto&#39;</span></span>)</span>"}, {"fullname": "Utils.DataModifier.DataUnifier.DataUnifier.data", "modulename": "Utils.DataModifier.DataUnifier", "qualname": "DataUnifier.data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DataUnifier.DataUnifier.preferences", "modulename": "Utils.DataModifier.DataUnifier", "qualname": "DataUnifier.preferences", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DataUnifier.DataUnifier.mode", "modulename": "Utils.DataModifier.DataUnifier", "qualname": "DataUnifier.mode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DataUnifier.DataUnifier.unified_data", "modulename": "Utils.DataModifier.DataUnifier", "qualname": "DataUnifier.unified_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DataUnifier.DataUnifier.unifyPreferencesMin", "modulename": "Utils.DataModifier.DataUnifier", "qualname": "DataUnifier.unifyPreferencesMin", "kind": "function", "doc": "<p>Converts all preferences in the relation to MIN by inverting MAX dimensions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.DataUnifier.DataUnifier.unifyPreferencesMax", "modulename": "Utils.DataModifier.DataUnifier", "qualname": "DataUnifier.unifyPreferencesMax", "kind": "function", "doc": "<p>Converts all preferences in the relation to MAX by inverting MIN dimensions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.DataUnifier.DataUnifier.tupleToTab", "modulename": "Utils.DataModifier.DataUnifier", "qualname": "DataUnifier.tupleToTab", "kind": "function", "doc": "<p>Converts all tuple values in the relation dictionary to lists.</p>\n\n<p>This is used to allow in-place modification of the data (since lists are mutable,\nunlike tuples).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rTuple</strong>:  dict - the relation dictionary with tuple values to be converted</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rTuple</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.DataUnifier.DataUnifier.tabToTuple", "modulename": "Utils.DataModifier.DataUnifier", "qualname": "DataUnifier.tabToTuple", "kind": "function", "doc": "<p>Converts all list values in the relation dictionary back to tuples.</p>\n\n<p>This is typically used after data processing to restore the original tuple format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rTab</strong>:  dict - the relation dictionary with list values to be converted</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rTab</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.DataUnifier.DataUnifier.unifyPreferences", "modulename": "Utils.DataModifier.DataUnifier", "qualname": "DataUnifier.unifyPreferences", "kind": "function", "doc": "<p>Unify the preferences based on the given mode.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>unified preferences</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.DatabaseToDict", "modulename": "Utils.DataModifier.DatabaseToDict", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DatabaseToDict.DatabaseToDict", "modulename": "Utils.DataModifier.DatabaseToDict", "qualname": "DatabaseToDict", "kind": "class", "doc": "<p>Class to convert a SQLite database table into a Python dictionary.</p>\n"}, {"fullname": "Utils.DataModifier.DatabaseToDict.DatabaseToDict.__init__", "modulename": "Utils.DataModifier.DatabaseToDict", "qualname": "DatabaseToDict.__init__", "kind": "function", "doc": "<p>Constructor of the class.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>databaseFilepath</strong>:  Path to the SQLite database file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">databaseFilepath</span></span>)</span>"}, {"fullname": "Utils.DataModifier.DatabaseToDict.DatabaseToDict.conn", "modulename": "Utils.DataModifier.DatabaseToDict", "qualname": "DatabaseToDict.conn", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DatabaseToDict.DatabaseToDict.cursor", "modulename": "Utils.DataModifier.DatabaseToDict", "qualname": "DatabaseToDict.cursor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DatabaseToDict.DatabaseToDict.tableName", "modulename": "Utils.DataModifier.DatabaseToDict", "qualname": "DatabaseToDict.tableName", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DatabaseToDict.DatabaseToDict.data", "modulename": "Utils.DataModifier.DatabaseToDict", "qualname": "DatabaseToDict.data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DatabaseToDict.DatabaseToDict.toDict", "modulename": "Utils.DataModifier.DatabaseToDict", "qualname": "DatabaseToDict.toDict", "kind": "function", "doc": "<p>Converts the database table into a dictionary.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary where keys are RowIds and values are tuples of the row's data.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.DatabaseToDict.DatabaseToDict.getMax", "modulename": "Utils.DataModifier.DatabaseToDict", "qualname": "DatabaseToDict.getMax", "kind": "function", "doc": "<p>Gets the maximum value across columns Col_A, Col_B, and Col_C.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The maximum value among Col_A, Col_B, and Col_C.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.DictToDatabase", "modulename": "Utils.DataModifier.DictToDatabase", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DictToDatabase.DictToDatabase", "modulename": "Utils.DataModifier.DictToDatabase", "qualname": "DictToDatabase", "kind": "class", "doc": "<p>Class to convert a dictionary into a SQLite database table.</p>\n"}, {"fullname": "Utils.DataModifier.DictToDatabase.DictToDatabase.__init__", "modulename": "Utils.DataModifier.DictToDatabase", "qualname": "DictToDatabase.__init__", "kind": "function", "doc": "<p>Initialize the DictToDatabase class.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>databaseFilepath</strong>:  The path to the SQLite database file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">databaseFilepath</span></span>)</span>"}, {"fullname": "Utils.DataModifier.DictToDatabase.DictToDatabase.conn", "modulename": "Utils.DataModifier.DictToDatabase", "qualname": "DictToDatabase.conn", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DictToDatabase.DictToDatabase.cursor", "modulename": "Utils.DataModifier.DictToDatabase", "qualname": "DictToDatabase.cursor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DictToDatabase.DictToDatabase.tableName", "modulename": "Utils.DataModifier.DictToDatabase", "qualname": "DictToDatabase.tableName", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DictToDatabase.DictToDatabase.data", "modulename": "Utils.DataModifier.DictToDatabase", "qualname": "DictToDatabase.data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.DictToDatabase.DictToDatabase.toDatabase", "modulename": "Utils.DataModifier.DictToDatabase", "qualname": "DictToDatabase.toDatabase", "kind": "function", "doc": "<p>Convert the provided dictionary to a SQLite database table.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong>:  The dictionary to be converted (key -> tuple of values).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.JsonUtils", "modulename": "Utils.DataModifier.JsonUtils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.DataModifier.JsonUtils.readJson", "modulename": "Utils.DataModifier.JsonUtils", "qualname": "readJson", "kind": "function", "doc": "<p>Reads a JSON file and returns its content.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filePath</strong>:  Path to the JSON file.</li>\n<li><strong>asTuple</strong>:  If True, converts dictionary values to tuples.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The parsed JSON data as a dictionary.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filePath</span>, </span><span class=\"param\"><span class=\"n\">asTuple</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.JsonUtils.writeJson", "modulename": "Utils.DataModifier.JsonUtils", "qualname": "writeJson", "kind": "function", "doc": "<p>Writes data to a JSON file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filePath</strong>:  Path where the JSON file will be saved.</li>\n<li><strong>data</strong>:  Data to write (dictionary).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filePath</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.JsonUtils.updateJson", "modulename": "Utils.DataModifier.JsonUtils", "qualname": "updateJson", "kind": "function", "doc": "<p>Updates or adds a key in a JSON file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filePath</strong>:  Path to the JSON file.</li>\n<li><strong>key</strong>:  Key to update or add.</li>\n<li><strong>value</strong>:  Value to set for the given key.</li>\n<li><strong>type</strong>:  (Unused for now) Type of data. Default is \"arr\".</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filePath</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;arr&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.JsonUtils.prettyPrintTimeData", "modulename": "Utils.DataModifier.JsonUtils", "qualname": "prettyPrintTimeData", "kind": "function", "doc": "<p>Pretty-prints the time_data section of a JSON file in a table format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filePath</strong>:  Path to the JSON file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filePath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.JsonUtils.toOneColumn", "modulename": "Utils.DataModifier.JsonUtils", "qualname": "toOneColumn", "kind": "function", "doc": "<p>Converts time_data to keep only one column (3, 6, or 9 attributes).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fp</strong>:  Input JSON file path.</li>\n<li><strong>idx</strong>:  Index of the column to keep (0 for 3 cols, 1 for 6 cols, 2 for 9 cols).</li>\n<li><strong>outputFile</strong>:  Output file path to save the transformed data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fp</span>, </span><span class=\"param\"><span class=\"n\">idx</span>, </span><span class=\"param\"><span class=\"n\">outputFile</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.JsonUtils.sortJson", "modulename": "Utils.DataModifier.JsonUtils", "qualname": "sortJson", "kind": "function", "doc": "<p>Sorts the time_data dictionary inside a JSON file by ascending number of rows.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fp</strong>:  Path to the JSON file to sort.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fp</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataModifier.JsonUtils.addServerConfigToJson", "modulename": "Utils.DataModifier.JsonUtils", "qualname": "addServerConfigToJson", "kind": "function", "doc": "<p>Adds server configuration into an existing JSON file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>json_path</strong>:  Path to the JSON file where configuration will be inserted.</li>\n<li><strong>config_path</strong>:  Path to the server configuration JSON file.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>FileNotFoundError</strong>:  If json_path or config_path does not exist.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">json_path</span>, </span><span class=\"param\"><span class=\"n\">config_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataParser", "modulename": "Utils.DataParser", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.DataParser.DataParser", "modulename": "Utils.DataParser", "qualname": "DataParser", "kind": "class", "doc": "<p>Class that converts SQL query results into a Python dictionary format.\nEach row from the SQL result becomes a dictionary entry, with the row ID as key\nand the remaining values as a tuple.</p>\n"}, {"fullname": "Utils.DataParser.DataParser.__init__", "modulename": "Utils.DataParser", "qualname": "DataParser.__init__", "kind": "function", "doc": "<p>Initialize the DataParser.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sql_r</strong>:  List of rows returned from a SQL query, where each row is a tuple.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sql_r</span></span>)</span>"}, {"fullname": "Utils.DataParser.DataParser.sql_r", "modulename": "Utils.DataParser", "qualname": "DataParser.sql_r", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataParser.DataParser.r_dict", "modulename": "Utils.DataParser", "qualname": "DataParser.r_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataParser.DataParser.convert", "modulename": "Utils.DataParser", "qualname": "DataParser.convert", "kind": "function", "doc": "<p>Dictionary comprehension that processes each SQL row.</p>\n\n<ul>\n<li>The first element of each row (row ID) is used as the key.</li>\n<li>The remaining elements are grouped into a tuple and used as the value.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary {row_id: (column1_value, column2_value, ...)}</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DataTypes", "modulename": "Utils.DataTypes", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.DataTypes.DbObject", "modulename": "Utils.DataTypes.DbObject", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.DataTypes.DbObject.DbObject", "modulename": "Utils.DataTypes.DbObject", "qualname": "DbObject", "kind": "class", "doc": "<p>A class to represent a database object.</p>\n"}, {"fullname": "Utils.DataTypes.DbObject.DbObject.__init__", "modulename": "Utils.DataTypes.DbObject", "qualname": "DbObject.__init__", "kind": "function", "doc": "<p>Initialize the database object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fp</strong>:  Path to the database file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fp</span></span>)</span>"}, {"fullname": "Utils.DataTypes.DbObject.DbObject.fp", "modulename": "Utils.DataTypes.DbObject", "qualname": "DbObject.fp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataTypes.DictObject", "modulename": "Utils.DataTypes.DictObject", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.DataTypes.DictObject.DictObject", "modulename": "Utils.DataTypes.DictObject", "qualname": "DictObject", "kind": "class", "doc": "<p>A class to represent a dictionary object.</p>\n"}, {"fullname": "Utils.DataTypes.DictObject.DictObject.__init__", "modulename": "Utils.DataTypes.DictObject", "qualname": "DictObject.__init__", "kind": "function", "doc": "<p>Initialize the DictObject with a dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>r</strong>:  Dictionary to be accessed as attributes.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">r</span></span>)</span>"}, {"fullname": "Utils.DataTypes.DictObject.DictObject.r", "modulename": "Utils.DataTypes.DictObject", "qualname": "DictObject.r", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataTypes.JsonObject", "modulename": "Utils.DataTypes.JsonObject", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.DataTypes.JsonObject.JsonObject", "modulename": "Utils.DataTypes.JsonObject", "qualname": "JsonObject", "kind": "class", "doc": "<p>A class to represent a JSON object.</p>\n"}, {"fullname": "Utils.DataTypes.JsonObject.JsonObject.__init__", "modulename": "Utils.DataTypes.JsonObject", "qualname": "JsonObject.__init__", "kind": "function", "doc": "<p>Initialize the JSON object</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fp</strong>:  Path to the JSON file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fp</span></span>)</span>"}, {"fullname": "Utils.DataTypes.JsonObject.JsonObject.fp", "modulename": "Utils.DataTypes.JsonObject", "qualname": "JsonObject.fp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DataTypes.JsonObject.JsonObject.data", "modulename": "Utils.DataTypes.JsonObject", "qualname": "JsonObject.data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.DisplayHelpers", "modulename": "Utils.DisplayHelpers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.DisplayHelpers.print_color", "modulename": "Utils.DisplayHelpers", "qualname": "print_color", "kind": "function", "doc": "<p>Print in the desired color</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>color</strong>:  The color (formatted for colorama) Fore.GREEN / Fore.BLUE etc...</li>\n<li><strong>text</strong>:  The text to display</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">color</span>, </span><span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DisplayHelpers.print_green", "modulename": "Utils.DisplayHelpers", "qualname": "print_green", "kind": "function", "doc": "<p>Print in green</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>text</strong>:  The text to display</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DisplayHelpers.print_red", "modulename": "Utils.DisplayHelpers", "qualname": "print_red", "kind": "function", "doc": "<p>Print in red</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>text</strong>:  The text to display</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.DisplayHelpers.beauty_print", "modulename": "Utils.DisplayHelpers", "qualname": "beauty_print", "kind": "function", "doc": "<p>Nicely format and print a title and its associated data</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>title</strong>:  The title to display</li>\n<li><strong>data</strong>:  The data to display (can be a list, dict, or other types)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">title</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Exporter", "modulename": "Utils.Exporter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.Exporter.CsvExporter", "modulename": "Utils.Exporter.CsvExporter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.Exporter.CsvExporter.CsvExporter", "modulename": "Utils.Exporter.CsvExporter", "qualname": "CsvExporter", "kind": "class", "doc": "<p>Simple CSV exporter to save basic App results to a CSV file.</p>\n"}, {"fullname": "Utils.Exporter.CsvExporter.CsvExporter.__init__", "modulename": "Utils.Exporter.CsvExporter", "qualname": "CsvExporter.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_path</strong>:  The path where the CSV file will be saved.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;Results.csv&#39;</span></span>)</span>"}, {"fullname": "Utils.Exporter.CsvExporter.CsvExporter.output_path", "modulename": "Utils.Exporter.CsvExporter", "qualname": "CsvExporter.output_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.Exporter.CsvExporter.CsvExporter.export", "modulename": "Utils.Exporter.CsvExporter", "qualname": "CsvExporter.export", "kind": "function", "doc": "<p>Export the algorithm name, cardinality, number of tuples, and execution time into a CSV file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>app</strong>:  The App instance containing the results.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">app</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Exporter.CsvExporterImpl", "modulename": "Utils.Exporter.CsvExporterImpl", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.Exporter.CsvExporterImpl.CsvExporterImpl", "modulename": "Utils.Exporter.CsvExporterImpl", "qualname": "CsvExporterImpl", "kind": "class", "doc": "<p>Exporter implementation that saves execution metadata and Skyline point identifiers in CSV format.</p>\n"}, {"fullname": "Utils.Exporter.CsvExporterImpl.CsvExporterImpl.__init__", "modulename": "Utils.Exporter.CsvExporterImpl", "qualname": "CsvExporterImpl.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_path</strong>:  Path to the CSV file to export to.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;../Assets/Export/CSVFiles/Result.csv&#39;</span></span>)</span>"}, {"fullname": "Utils.Exporter.CsvExporterImpl.CsvExporterImpl.output_path", "modulename": "Utils.Exporter.CsvExporterImpl", "qualname": "CsvExporterImpl.output_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.Exporter.CsvExporterImpl.CsvExporterImpl.export", "modulename": "Utils.Exporter.CsvExporterImpl", "qualname": "CsvExporterImpl.export", "kind": "function", "doc": "<p>Export Skyline result information from the given App instance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>app</strong>:  The App instance with algorithm results.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">app</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Exporter.Exporter", "modulename": "Utils.Exporter.Exporter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.Exporter.Exporter.Exporter", "modulename": "Utils.Exporter.Exporter", "qualname": "Exporter", "kind": "class", "doc": "<p>Abstract base class for exporters.</p>\n\n<p>Any concrete exporter must implement the 'export' method.</p>\n"}, {"fullname": "Utils.Exporter.Exporter.Exporter.export", "modulename": "Utils.Exporter.Exporter", "qualname": "Exporter.export", "kind": "function", "doc": "<p>Export the results of the given App instance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>app</strong>:  Instance of App containing the results to export.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotImplementedError</strong>:  Always, unless overridden in a subclass.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">app</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Exporter.JsonExporter", "modulename": "Utils.Exporter.JsonExporter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.Exporter.JsonExporter.JsonExporter", "modulename": "Utils.Exporter.JsonExporter", "qualname": "JsonExporter", "kind": "class", "doc": "<p>Simple JSON exporter to save algorithm results from an App instance into a JSON file.</p>\n"}, {"fullname": "Utils.Exporter.JsonExporter.JsonExporter.__init__", "modulename": "Utils.Exporter.JsonExporter", "qualname": "JsonExporter.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_path</strong>:  The path where the JSON file will be saved.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;Results.json&#39;</span></span>)</span>"}, {"fullname": "Utils.Exporter.JsonExporter.JsonExporter.output_path", "modulename": "Utils.Exporter.JsonExporter", "qualname": "JsonExporter.output_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.Exporter.JsonExporter.JsonExporter.export", "modulename": "Utils.Exporter.JsonExporter", "qualname": "JsonExporter.export", "kind": "function", "doc": "<p>Export basic execution info to a JSON file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>app</strong>:  The App instance to export.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">app</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Exporter.JsonExporterImpl", "modulename": "Utils.Exporter.JsonExporterImpl", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.Exporter.JsonExporterImpl.JsonExporterImpl", "modulename": "Utils.Exporter.JsonExporterImpl", "qualname": "JsonExporterImpl", "kind": "class", "doc": "<p>Exporter implementation that saves execution metadata and Skyline point identifiers in JSON format.</p>\n"}, {"fullname": "Utils.Exporter.JsonExporterImpl.JsonExporterImpl.__init__", "modulename": "Utils.Exporter.JsonExporterImpl", "qualname": "JsonExporterImpl.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_path</strong>:  Path to the JSON file to export to.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;../Assets/Export/JsonFiles/Result.json&#39;</span></span>)</span>"}, {"fullname": "Utils.Exporter.JsonExporterImpl.JsonExporterImpl.output_path", "modulename": "Utils.Exporter.JsonExporterImpl", "qualname": "JsonExporterImpl.output_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.Exporter.JsonExporterImpl.JsonExporterImpl.export", "modulename": "Utils.Exporter.JsonExporterImpl", "qualname": "JsonExporterImpl.export", "kind": "function", "doc": "<p>Export Skyline result information from the given App instance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>app</strong>:  The App instance with algorithm results.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">app</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Helpers", "modulename": "Utils.Helpers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.Helpers.DP_IDP_ALL", "modulename": "Utils.Helpers", "qualname": "DP_IDP_ALL", "kind": "class", "doc": "<p>Class to run the DP-IDP algorithm</p>\n"}, {"fullname": "Utils.Helpers.DP_IDP_ALL.__init__", "modulename": "Utils.Helpers", "qualname": "DP_IDP_ALL.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">r</span>, </span><span class=\"param\"><span class=\"n\">is_debug</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "Utils.Helpers.DP_IDP_ALL.is_debug", "modulename": "Utils.Helpers", "qualname": "DP_IDP_ALL.is_debug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.Helpers.DP_IDP_ALL.relations", "modulename": "Utils.Helpers", "qualname": "DP_IDP_ALL.relations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.Helpers.DP_IDP_ALL.dp_idp1", "modulename": "Utils.Helpers", "qualname": "DP_IDP_ALL.dp_idp1", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Helpers.DP_IDP_ALL.display_console", "modulename": "Utils.Helpers", "qualname": "DP_IDP_ALL.display_console", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dom</span>, </span><span class=\"param\"><span class=\"n\">tot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Helpers.python2_to_python3_folders", "modulename": "Utils.Helpers", "qualname": "python2_to_python3_folders", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">py3_dir</span>, </span><span class=\"param\"><span class=\"n\">py2_dir</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Helpers.menu", "modulename": "Utils.Helpers", "qualname": "menu", "kind": "function", "doc": "<p>Init menu</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Database object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">default_choice</span><span class=\"o\">=</span><span class=\"s1\">&#39;2&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex", "modulename": "Utils.Latex", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.Latex.AlgoCalculator", "modulename": "Utils.Latex.AlgoCalculator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.Latex.AlgoCalculator.ROWS_RATIO_MULT", "modulename": "Utils.Latex.AlgoCalculator", "qualname": "ROWS_RATIO_MULT", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000"}, {"fullname": "Utils.Latex.AlgoCalculator.ROWS_RATIO_UNITS", "modulename": "Utils.Latex.AlgoCalculator", "qualname": "ROWS_RATIO_UNITS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[1, 2, 5, 10]"}, {"fullname": "Utils.Latex.AlgoCalculator.ROWS_RATIO", "modulename": "Utils.Latex.AlgoCalculator", "qualname": "ROWS_RATIO", "kind": "variable", "doc": "<p></p>\n", "default_value": "[1000, 2000, 5000, 10000]"}, {"fullname": "Utils.Latex.AlgoCalculator.AlgoCalculator", "modulename": "Utils.Latex.AlgoCalculator", "qualname": "AlgoCalculator", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "Utils.Latex.AlgoCalculator.AlgoCalculator.__init__", "modulename": "Utils.Latex.AlgoCalculator", "qualname": "AlgoCalculator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db_filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "Utils.Latex.AlgoCalculator.AlgoCalculator.conn", "modulename": "Utils.Latex.AlgoCalculator", "qualname": "AlgoCalculator.conn", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.Latex.AlgoCalculator.AlgoCalculator.cursor", "modulename": "Utils.Latex.AlgoCalculator", "qualname": "AlgoCalculator.cursor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.Latex.AlgoCalculator.AlgoCalculator.tableName", "modulename": "Utils.Latex.AlgoCalculator", "qualname": "AlgoCalculator.tableName", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.Latex.AlgoCalculator.AlgoCalculator.cols", "modulename": "Utils.Latex.AlgoCalculator", "qualname": "AlgoCalculator.cols", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.Latex.AlgoCalculator.AlgoCalculator.rows", "modulename": "Utils.Latex.AlgoCalculator", "qualname": "AlgoCalculator.rows", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.Latex.AlgoCalculator.AlgoCalculator.select_all", "modulename": "Utils.Latex.AlgoCalculator", "qualname": "AlgoCalculator.select_all", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.AlgoCalculator.AlgoCalculator.compareExecutionTime", "modulename": "Utils.Latex.AlgoCalculator", "qualname": "AlgoCalculator.compareExecutionTime", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">algo</span>, </span><span class=\"param\"><span class=\"n\">fp</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">cols</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">rows</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">pref</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.AlgoCalculator.COMPARE_ALL", "modulename": "Utils.Latex.AlgoCalculator", "qualname": "COMPARE_ALL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;COMPARE_ALL&#x27;"}, {"fullname": "Utils.Latex.AlgoCalculator.COSKY_ALGO_", "modulename": "Utils.Latex.AlgoCalculator", "qualname": "COSKY_ALGO_", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;COSKY_ALGO&#x27;"}, {"fullname": "Utils.Latex.AlgoCalculator.COSKY_SQL_", "modulename": "Utils.Latex.AlgoCalculator", "qualname": "COSKY_SQL_", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;COSKY_SQL&#x27;"}, {"fullname": "Utils.Latex.AlgoCalculator.CONFIG_DATA", "modulename": "Utils.Latex.AlgoCalculator", "qualname": "CONFIG_DATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;CONFIG_DATA&#x27;"}, {"fullname": "Utils.Latex.AlgoCalculator.RANK_SKY", "modulename": "Utils.Latex.AlgoCalculator", "qualname": "RANK_SKY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;RANK_SKY&#x27;"}, {"fullname": "Utils.Latex.AlgoCalculator.MODES", "modulename": "Utils.Latex.AlgoCalculator", "qualname": "MODES", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;COSKY_ALGO&#x27;: &lt;class &#x27;Algorithms.CoskyAlgorithme.CoskyAlgorithme&#x27;&gt;, &#x27;COSKY_SQL&#x27;: &lt;class &#x27;Algorithms.CoskySql.CoskySQL&#x27;&gt;, &#x27;DpIdpDh&#x27;: &lt;class &#x27;Algorithms.DpIdpDh.DpIdpDh&#x27;&gt;, &#x27;RANK_SKY&#x27;: &lt;class &#x27;Algorithms.RankSky.RankSky&#x27;&gt;, &#x27;SkyIR&#x27;: &lt;class &#x27;Algorithms.SkyIR.SkyIR&#x27;&gt;}"}, {"fullname": "Utils.Latex.AlgoEnum", "modulename": "Utils.Latex.AlgoEnum", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.Latex.AlgoEnum.AlgoEnum", "modulename": "Utils.Latex.AlgoEnum", "qualname": "AlgoEnum", "kind": "class", "doc": "<p>Enum class representing different Skyline algorithms along with their label and JSON file path.</p>\n", "bases": "enum.Enum"}, {"fullname": "Utils.Latex.AlgoEnum.AlgoEnum.__init__", "modulename": "Utils.Latex.AlgoEnum", "qualname": "AlgoEnum.__init__", "kind": "function", "doc": "<p>Initialize each enum member.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>label</strong>:  The display label for the algorithm.</li>\n<li><strong>filepath</strong>:  The JSON file path where the execution times are stored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "Utils.Latex.AlgoEnum.AlgoEnum.CoskySql", "modulename": "Utils.Latex.AlgoEnum", "qualname": "AlgoEnum.CoskySql", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AlgoEnum.CoskySql: (&quot;CoSky &#x27;Sql query&#x27;&quot;, &#x27;Assets/LatexData/OneAlgoData/CoskySql/ThreeColumnsData/ExecutionCoskySql369.json&#x27;)&gt;"}, {"fullname": "Utils.Latex.AlgoEnum.AlgoEnum.CoskyAlgorithme", "modulename": "Utils.Latex.AlgoEnum", "qualname": "AlgoEnum.CoskyAlgorithme", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AlgoEnum.CoskyAlgorithme: (&quot;CoSky &#x27;algorithm&#x27;&quot;, &#x27;Assets/LatexData/OneAlgoData/CoskyAlgo/ThreeColumnsData/ExecutionCoskyAlgo369.json&#x27;)&gt;"}, {"fullname": "Utils.Latex.AlgoEnum.AlgoEnum.RankSky", "modulename": "Utils.Latex.AlgoEnum", "qualname": "AlgoEnum.RankSky", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AlgoEnum.RankSky: (&#x27;RankSky&#x27;, &#x27;Assets/LatexData/OneAlgoData/RankSky/ThreeColumnsData/ExecutionRankSky369.json&#x27;)&gt;"}, {"fullname": "Utils.Latex.AlgoEnum.AlgoEnum.DpIdpDh", "modulename": "Utils.Latex.AlgoEnum", "qualname": "AlgoEnum.DpIdpDh", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AlgoEnum.DpIdpDh: (&#x27;dp-idp with dominance hierarchy&#x27;, &#x27;Assets/LatexData/OneAlgoData/DpIdpDh/ThreeColumnsData/ExecutionDpIdpDh369.json&#x27;)&gt;"}, {"fullname": "Utils.Latex.AlgoEnum.AlgoEnum.SkyIR", "modulename": "Utils.Latex.AlgoEnum", "qualname": "AlgoEnum.SkyIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AlgoEnum.SkyIR: (&#x27;SkyIR-UBS&#x27;, &#x27;Assets/LatexData/OneAlgoData/SkyIR/ThreeColumnsData/ExecutionSkyIR369.json&#x27;)&gt;"}, {"fullname": "Utils.Latex.AlgoEnum.AlgoEnum.label", "modulename": "Utils.Latex.AlgoEnum", "qualname": "AlgoEnum.label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.Latex.AlgoEnum.AlgoEnum.filepath", "modulename": "Utils.Latex.AlgoEnum", "qualname": "AlgoEnum.filepath", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.Latex.AlgoEnum.AlgoEnum.get_algo_class", "modulename": "Utils.Latex.AlgoEnum", "qualname": "AlgoEnum.get_algo_class", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.LatexMaker", "modulename": "Utils.Latex.LatexMaker", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.Latex.LatexMaker.LatexMaker", "modulename": "Utils.Latex.LatexMaker", "qualname": "LatexMaker", "kind": "class", "doc": "<p>Class responsible for generating LaTeX documents from algorithm execution results.</p>\n"}, {"fullname": "Utils.Latex.LatexMaker.LatexMaker.__init__", "modulename": "Utils.Latex.LatexMaker", "qualname": "LatexMaker.__init__", "kind": "function", "doc": "<p>Initialize the LatexMaker instance with default colors and path.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "Utils.Latex.LatexMaker.LatexMaker.latexCode", "modulename": "Utils.Latex.LatexMaker", "qualname": "LatexMaker.latexCode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.Latex.LatexMaker.LatexMaker.latexFinal", "modulename": "Utils.Latex.LatexMaker", "qualname": "LatexMaker.latexFinal", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.Latex.LatexMaker.LatexMaker.colors", "modulename": "Utils.Latex.LatexMaker", "qualname": "LatexMaker.colors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.Latex.LatexMaker.LatexMaker.path", "modulename": "Utils.Latex.LatexMaker", "qualname": "LatexMaker.path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.Latex.LatexMaker.LatexMaker.defineColor", "modulename": "Utils.Latex.LatexMaker", "qualname": "LatexMaker.defineColor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.Latex.LatexMaker.LatexMaker.addLatexCode", "modulename": "Utils.Latex.LatexMaker", "qualname": "LatexMaker.addLatexCode", "kind": "function", "doc": "<p>Add generated LaTeX code to the final document.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>latexCode</strong>:  The LaTeX code to add.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">latexCode</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.LatexMaker.LatexMaker.render", "modulename": "Utils.Latex.LatexMaker", "qualname": "LatexMaker.render", "kind": "function", "doc": "<p>Save the final LaTeX code to a file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.LatexMaker.LatexMaker.getData", "modulename": "Utils.Latex.LatexMaker", "qualname": "LatexMaker.getData", "kind": "function", "doc": "<p>Read and parse a JSON file containing execution time data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong>:  Path to the JSON file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple (timeDict, maxRows, maxTime)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.LatexMaker.LatexMaker.get_rgb_value", "modulename": "Utils.Latex.LatexMaker", "qualname": "LatexMaker.get_rgb_value", "kind": "function", "doc": "<p>Return the RGB or HTML value for a given color name.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>color_name</strong>:  Name of the color.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple (color value, color format).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">color_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.LatexMaker.LatexMaker.prepareComparisonData", "modulename": "Utils.Latex.LatexMaker", "qualname": "LatexMaker.prepareComparisonData", "kind": "function", "doc": "<p>Prepare time data for comparison plots.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>jsonPaths</strong>:  List of paths to JSON files.</li>\n<li><strong>attributes</strong>:  List of attributes to consider (default [3, 6, 9]).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>(timeDicts, maxRowsList, maxTimeList)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">jsonPaths</span>, </span><span class=\"param\"><span class=\"n\">attributes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.LatexMaker.LatexMaker.roundToNearestN", "modulename": "Utils.Latex.LatexMaker", "qualname": "LatexMaker.roundToNearestN", "kind": "function", "doc": "<p>Round the given value to the nearest multiple of (n-1).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The value to round.</li>\n<li><strong>n</strong>:  The reference number; rounding is done to a multiple of (n-1).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The rounded value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.LatexMaker.LatexMaker.twoAlgoComparaison369Latex", "modulename": "Utils.Latex.LatexMaker", "qualname": "LatexMaker.twoAlgoComparaison369Latex", "kind": "function", "doc": "<p>Generate clean and well-indented LaTeX code to compare two algorithms across multiple attributes\n(typically for 3, 6, and 9 attributes), with linear scaling for axes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>timeDict1</strong>:  Time dictionary for the first algorithm.</li>\n<li><strong>timeDict2</strong>:  Time dictionary for the second algorithm.</li>\n<li><strong>maxRowsList</strong>:  List containing the maximum cardinality for each attribute configuration.</li>\n<li><strong>maxTimeList</strong>:  List containing the maximum execution time for each attribute configuration.</li>\n<li><strong>algo1</strong>:  Enum member (AlgoEnum) representing the first algorithm to compare.</li>\n<li><strong>algo2</strong>:  Enum member (AlgoEnum) representing the second algorithm to compare.</li>\n<li><strong>latexFilePath</strong>:  Path to save the generated LaTeX file (relative or absolute).</li>\n<li><strong>scaleX</strong>:  Width of the graph in points (default is 280pt).</li>\n<li><strong>scaleY</strong>:  Height of the graph in points (default is 280pt).</li>\n<li><strong>attributes</strong>:  List of attribute counts to compare (default is [3, 6, 9]).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">timeDict1</span>,</span><span class=\"param\">\t<span class=\"n\">timeDict2</span>,</span><span class=\"param\">\t<span class=\"n\">maxRowsList</span>,</span><span class=\"param\">\t<span class=\"n\">maxTimeList</span>,</span><span class=\"param\">\t<span class=\"n\">algo1</span>,</span><span class=\"param\">\t<span class=\"n\">algo2</span>,</span><span class=\"param\">\t<span class=\"n\">latexFilePath</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">scaleX</span><span class=\"o\">=</span><span class=\"mi\">280</span>,</span><span class=\"param\">\t<span class=\"n\">scaleY</span><span class=\"o\">=</span><span class=\"mi\">280</span>,</span><span class=\"param\">\t<span class=\"n\">attributes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.LatexMaker.LatexMaker.twoAlgoComparaison369LatexLog", "modulename": "Utils.Latex.LatexMaker", "qualname": "LatexMaker.twoAlgoComparaison369LatexLog", "kind": "function", "doc": "<p>Generate LaTeX code to compare two algorithms across multiple attributes (3, 6, 9),\nwith optional logarithmic or linear scaling on the X and/or Y axes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>timeDict1</strong>:  Time dictionary for the first algorithm.</li>\n<li><strong>timeDict2</strong>:  Time dictionary for the second algorithm.</li>\n<li><strong>maxRowsList</strong>:  List of maximum cardinalities (number of rows) for each attribute.</li>\n<li><strong>maxTimeList</strong>:  List of maximum execution times for each attribute.</li>\n<li><strong>algo1</strong>:  Enum value (AlgoEnum) corresponding to the first algorithm.</li>\n<li><strong>algo2</strong>:  Enum value (AlgoEnum) corresponding to the second algorithm.</li>\n<li><strong>latexFilePath</strong>:  Path where the LaTeX output file will be saved.</li>\n<li><strong>scaleX</strong>:  Width of the plot in points (default 280).</li>\n<li><strong>scaleY</strong>:  Height of the plot in points (default 280).</li>\n<li><strong>attributes</strong>:  List of attributes (typically [3, 6, 9]) to generate the plots for.</li>\n<li><strong>scaleType</strong>:  Scaling type for axes, can be \"LinX/LinY\", \"LogX/LinY\", \"LinX/LogY\", or \"LogX/LogY\".</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">timeDict1</span>,</span><span class=\"param\">\t<span class=\"n\">timeDict2</span>,</span><span class=\"param\">\t<span class=\"n\">maxRowsList</span>,</span><span class=\"param\">\t<span class=\"n\">maxTimeList</span>,</span><span class=\"param\">\t<span class=\"n\">algo1</span>,</span><span class=\"param\">\t<span class=\"n\">algo2</span>,</span><span class=\"param\">\t<span class=\"n\">latexFilePath</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">scaleX</span><span class=\"o\">=</span><span class=\"mi\">280</span>,</span><span class=\"param\">\t<span class=\"n\">scaleY</span><span class=\"o\">=</span><span class=\"mi\">280</span>,</span><span class=\"param\">\t<span class=\"n\">attributes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">scaleType</span><span class=\"o\">=</span><span class=\"s1\">&#39;LinX/LinY&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.LatexMaker.LatexMaker.threeAlgoComparaison369LatexLog", "modulename": "Utils.Latex.LatexMaker", "qualname": "LatexMaker.threeAlgoComparaison369LatexLog", "kind": "function", "doc": "<p>Generate LaTeX code to compare three algorithms across multiple attributes\nwith optional logarithmic scaling for X and/or Y axes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>timeDict1</strong>:  Time dictionary for the first algorithm.</li>\n<li><strong>timeDict2</strong>:  Time dictionary for the second algorithm.</li>\n<li><strong>timeDict3</strong>:  Time dictionary for the third algorithm.</li>\n<li><strong>maxRowsList</strong>:  List of maximum row counts per attribute (3, 6, 9).</li>\n<li><strong>maxTimeList</strong>:  List of maximum execution times per attribute (3, 6, 9).</li>\n<li><strong>algo1</strong>:  Enum value (AlgoEnum) corresponding to the first algorithm.</li>\n<li><strong>algo2</strong>:  Enum value (AlgoEnum) corresponding to the second algorithm.</li>\n<li><strong>algo3</strong>:  Enum value (AlgoEnum) corresponding to the third algorithm.</li>\n<li><strong>latexFilePath</strong>:  Output path where the generated LaTeX file will be saved.</li>\n<li><strong>scaleX</strong>:  Width of the generated graph (in pt, default 280).</li>\n<li><strong>scaleY</strong>:  Height of the generated graph (in pt, default 280).</li>\n<li><strong>attributes</strong>:  List of attributes to generate graphs for (default [3, 6, 9]).</li>\n<li><strong>scaleType</strong>:  Type of scaling on X and Y axes (\"LinX/LinY\", \"LogX/LinY\", \"LinX/LogY\", or \"LogX/LogY\").</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">timeDict1</span>,</span><span class=\"param\">\t<span class=\"n\">timeDict2</span>,</span><span class=\"param\">\t<span class=\"n\">timeDict3</span>,</span><span class=\"param\">\t<span class=\"n\">maxRowsList</span>,</span><span class=\"param\">\t<span class=\"n\">maxTimeList</span>,</span><span class=\"param\">\t<span class=\"n\">algo1</span>,</span><span class=\"param\">\t<span class=\"n\">algo2</span>,</span><span class=\"param\">\t<span class=\"n\">algo3</span>,</span><span class=\"param\">\t<span class=\"n\">latexFilePath</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">scaleX</span><span class=\"o\">=</span><span class=\"mi\">280</span>,</span><span class=\"param\">\t<span class=\"n\">scaleY</span><span class=\"o\">=</span><span class=\"mi\">280</span>,</span><span class=\"param\">\t<span class=\"n\">attributes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">scaleType</span><span class=\"o\">=</span><span class=\"s1\">&#39;LinX/LinY&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.LatexMaker.LatexMaker.threeAlgoComparaison369Latex", "modulename": "Utils.Latex.LatexMaker", "qualname": "LatexMaker.threeAlgoComparaison369Latex", "kind": "function", "doc": "<p>Generate LaTeX code for comparing three algorithms across 3, 6, and 9 attributes\nwith separate graphs for each attribute.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>timeDict1</strong>:  Time dictionary for the first algorithm.</li>\n<li><strong>timeDict2</strong>:  Time dictionary for the second algorithm.</li>\n<li><strong>timeDict3</strong>:  Time dictionary for the third algorithm.</li>\n<li><strong>maxRowsList</strong>:  List of maximum row counts for each attribute (3, 6, 9).</li>\n<li><strong>maxTimeList</strong>:  List of maximum execution times for each attribute (3, 6, 9).</li>\n<li><strong>algo1</strong>:  Enum value (AlgoEnum) of the first algorithm.</li>\n<li><strong>algo2</strong>:  Enum value (AlgoEnum) of the second algorithm.</li>\n<li><strong>algo3</strong>:  Enum value (AlgoEnum) of the third algorithm.</li>\n<li><strong>latexFilePath</strong>:  Output path where the LaTeX file will be saved.</li>\n<li><strong>scaleX</strong>:  Width of the chart in points (default is 280).</li>\n<li><strong>scaleY</strong>:  Height of the chart in points (default is 280).</li>\n<li><strong>attributes</strong>:  List of attributes to generate the graphs for (default [3, 6, 9]).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">timeDict1</span>,</span><span class=\"param\">\t<span class=\"n\">timeDict2</span>,</span><span class=\"param\">\t<span class=\"n\">timeDict3</span>,</span><span class=\"param\">\t<span class=\"n\">maxRowsList</span>,</span><span class=\"param\">\t<span class=\"n\">maxTimeList</span>,</span><span class=\"param\">\t<span class=\"n\">algo1</span>,</span><span class=\"param\">\t<span class=\"n\">algo2</span>,</span><span class=\"param\">\t<span class=\"n\">algo3</span>,</span><span class=\"param\">\t<span class=\"n\">latexFilePath</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">scaleX</span><span class=\"o\">=</span><span class=\"mi\">280</span>,</span><span class=\"param\">\t<span class=\"n\">scaleY</span><span class=\"o\">=</span><span class=\"mi\">280</span>,</span><span class=\"param\">\t<span class=\"n\">attributes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.LatexMaker.LatexMaker.fiveAlgoComparaison369Latex", "modulename": "Utils.Latex.LatexMaker", "qualname": "LatexMaker.fiveAlgoComparaison369Latex", "kind": "function", "doc": "<p>Create LaTeX code to compare five algorithms across 3, 6, and 9 attributes,\neach plotted separately.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>timeDicts</strong>:  List of time dictionaries for each algorithm.</li>\n<li><strong>maxRowsList</strong>:  List of maximum cardinalities (rows) for each attribute set.</li>\n<li><strong>maxTimeList</strong>:  List of maximum execution times for each attribute set.</li>\n<li><strong>algos</strong>:  List of algorithm enums (AlgoEnum) representing each algorithm.</li>\n<li><strong>latexFilePath</strong>:  Path to the output LaTeX file.</li>\n<li><strong>scaleX</strong>:  Width of the plot in points (default 280).</li>\n<li><strong>scaleY</strong>:  Height of the plot in points (default 280).</li>\n<li><strong>attributes</strong>:  List of attributes (default [3, 6, 9]) for which the comparison is made.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">timeDicts</span>,</span><span class=\"param\">\t<span class=\"n\">maxRowsList</span>,</span><span class=\"param\">\t<span class=\"n\">maxTimeList</span>,</span><span class=\"param\">\t<span class=\"n\">algos</span>,</span><span class=\"param\">\t<span class=\"n\">latexFilePath</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">scaleX</span><span class=\"o\">=</span><span class=\"mi\">280</span>,</span><span class=\"param\">\t<span class=\"n\">scaleY</span><span class=\"o\">=</span><span class=\"mi\">280</span>,</span><span class=\"param\">\t<span class=\"n\">attributes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.LatexMaker.LatexMaker.coskySqlComparaisonLatex", "modulename": "Utils.Latex.LatexMaker", "qualname": "LatexMaker.coskySqlComparaisonLatex", "kind": "function", "doc": "<p>Create a LaTeX document that plots the execution time of CoSky SQL queries\nacross 3, 6, and 9 attributes on a 2D graph.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>timeDict</strong>:  Dictionary containing execution times by number of rows.</li>\n<li><strong>maxRows</strong>:  Maximum number of rows considered.</li>\n<li><strong>maxTime</strong>:  Maximum execution time observed.</li>\n<li><strong>latexFilePath</strong>:  Path where the resulting LaTeX file will be saved.</li>\n<li><strong>scaleX</strong>:  Width of the graph in points (default 280pt).</li>\n<li><strong>scaleY</strong>:  Height of the graph in points (default 280pt).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">timeDict</span>,</span><span class=\"param\">\t<span class=\"n\">maxRows</span>,</span><span class=\"param\">\t<span class=\"n\">maxTime</span>,</span><span class=\"param\">\t<span class=\"n\">latexFilePath</span>,</span><span class=\"param\">\t<span class=\"n\">scaleX</span><span class=\"o\">=</span><span class=\"mi\">280</span>,</span><span class=\"param\">\t<span class=\"n\">scaleY</span><span class=\"o\">=</span><span class=\"mi\">280</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.LatexMaker.LatexMaker.CoskyComparaisonNColumn", "modulename": "Utils.Latex.LatexMaker", "qualname": "LatexMaker.CoskyComparaisonNColumn", "kind": "function", "doc": "<p>Create a LaTeX file that draws a single graph for CoSky SQL algorithm with a given number of attributes (3, 6, or 9).</p>\n\n<p>Supports both linear and logarithmic axis scaling.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>column</strong>:  Number of attributes (must be 3, 6, or 9).</li>\n<li><strong>scaleX</strong>:  Width of the graph in points (default 300pt).</li>\n<li><strong>scaleY</strong>:  Height of the graph in points (default 300pt).</li>\n<li><strong>scaleType</strong>:  String to specify scaling ('LinX/LinY', 'LogX/LogY', etc.).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">column</span>, </span><span class=\"param\"><span class=\"n\">scaleX</span><span class=\"o\">=</span><span class=\"mi\">300</span>, </span><span class=\"param\"><span class=\"n\">scaleY</span><span class=\"o\">=</span><span class=\"mi\">300</span>, </span><span class=\"param\"><span class=\"n\">scaleType</span><span class=\"o\">=</span><span class=\"s1\">&#39;LinX/LinY&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.LatexMaker.roundtoNearestThousand", "modulename": "Utils.Latex.LatexMaker", "qualname": "roundtoNearestThousand", "kind": "function", "doc": "<p>Round the given value to the nearest thousand.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The value to round.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Rounded value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.LatexMaker.round_up_to_multiple", "modulename": "Utils.Latex.LatexMaker", "qualname": "round_up_to_multiple", "kind": "function", "doc": "<p>Round up the given value to the next multiple of 'multiple'.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The value to round.</li>\n<li><strong>multiple</strong>:  The multiple to round up to.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Rounded value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">multiple</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.LatexMaker.roundtoNearestTen", "modulename": "Utils.Latex.LatexMaker", "qualname": "roundtoNearestTen", "kind": "function", "doc": "<p>Round the given value to the nearest ten.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The value to round.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Rounded value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.LatexMaker.roundToNearestN", "modulename": "Utils.Latex.LatexMaker", "qualname": "roundToNearestN", "kind": "function", "doc": "<p>Round the given value to the nearest N.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The value to round.</li>\n<li><strong>n</strong>:  The nearest number to round to.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Rounded value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.LatexMaker.smart_roundup", "modulename": "Utils.Latex.LatexMaker", "qualname": "smart_roundup", "kind": "function", "doc": "<p>Smartly round up a value to a \"nice\" upper bound (for axis scaling purposes).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The value to round up.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Rounded up value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.UniversalLatexMaker", "modulename": "Utils.Latex.UniversalLatexMaker", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.Latex.UniversalLatexMaker.UniversalLatexGenerator", "modulename": "Utils.Latex.UniversalLatexMaker", "qualname": "UniversalLatexGenerator", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "Utils.Latex.UniversalLatexMaker.UniversalLatexGenerator.__init__", "modulename": "Utils.Latex.UniversalLatexMaker", "qualname": "UniversalLatexGenerator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;../../Assets/LatexFiles/UniversalLatexOutput.tex&#39;</span></span>)</span>"}, {"fullname": "Utils.Latex.UniversalLatexMaker.UniversalLatexGenerator.colors", "modulename": "Utils.Latex.UniversalLatexMaker", "qualname": "UniversalLatexGenerator.colors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.Latex.UniversalLatexMaker.UniversalLatexGenerator.output_path", "modulename": "Utils.Latex.UniversalLatexMaker", "qualname": "UniversalLatexGenerator.output_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.Latex.UniversalLatexMaker.UniversalLatexGenerator.get_rgb_value", "modulename": "Utils.Latex.UniversalLatexMaker", "qualname": "UniversalLatexGenerator.get_rgb_value", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">color_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.UniversalLatexMaker.UniversalLatexGenerator.round_to_axis", "modulename": "Utils.Latex.UniversalLatexMaker", "qualname": "UniversalLatexGenerator.round_to_axis", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.UniversalLatexMaker.UniversalLatexGenerator.format_tick_label", "modulename": "Utils.Latex.UniversalLatexMaker", "qualname": "UniversalLatexGenerator.format_tick_label", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.UniversalLatexMaker.UniversalLatexGenerator.generate_latex", "modulename": "Utils.Latex.UniversalLatexMaker", "qualname": "UniversalLatexGenerator.generate_latex", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">timeDicts</span>,</span><span class=\"param\">\t<span class=\"n\">maxRowsList</span>,</span><span class=\"param\">\t<span class=\"n\">maxTimeList</span>,</span><span class=\"param\">\t<span class=\"n\">algos</span>,</span><span class=\"param\">\t<span class=\"n\">attributes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">scaleX</span><span class=\"o\">=</span><span class=\"mi\">280</span>,</span><span class=\"param\">\t<span class=\"n\">scaleY</span><span class=\"o\">=</span><span class=\"mi\">280</span>,</span><span class=\"param\">\t<span class=\"n\">scaleType</span><span class=\"o\">=</span><span class=\"s1\">&#39;LinX/LinY&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.UniversalLatexMaker.UniversalLatexGenerator.normalizeTimeDicts", "modulename": "Utils.Latex.UniversalLatexMaker", "qualname": "UniversalLatexGenerator.normalizeTimeDicts", "kind": "function", "doc": "<p>Normalize a list of timeDicts so they all have the same keys.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>timeDicts: List of timeDicts (each a dict {int</strong>:  [float, float, float]}).</li>\n<li><strong>max_entries</strong>:  Optional maximum number of entries to keep (sorted by key).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Normalized list of timeDicts (same keys, same length).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timeDicts</span>, </span><span class=\"param\"><span class=\"n\">max_entries</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Latex.UniversalLatexMaker.load_json_data", "modulename": "Utils.Latex.UniversalLatexMaker", "qualname": "load_json_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">paths</span>, </span><span class=\"param\"><span class=\"n\">attributes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">max_entries</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Preference", "modulename": "Utils.Preference", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.Preference.Preference", "modulename": "Utils.Preference", "qualname": "Preference", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "Utils.Preference.Preference.MIN", "modulename": "Utils.Preference", "qualname": "Preference.MIN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Preference.MIN: &#x27;MIN&#x27;&gt;"}, {"fullname": "Utils.Preference.Preference.MAX", "modulename": "Utils.Preference", "qualname": "Preference.MAX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Preference.MAX: &#x27;MAX&#x27;&gt;"}, {"fullname": "Utils.Preference.Preference.reverse", "modulename": "Utils.Preference", "qualname": "Preference.reverse", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Preference.Preference.unify", "modulename": "Utils.Preference", "qualname": "Preference.unify", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">preferences</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;auto&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Preference.Preference.resolve", "modulename": "Utils.Preference", "qualname": "Preference.resolve", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">preferences</span>, </span><span class=\"param\"><span class=\"n\">force_mode</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">default_mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;min&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Preference.Preference.unifyTuple", "modulename": "Utils.Preference", "qualname": "Preference.unifyTuple", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">prefTuple</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;auto&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.Ranking", "modulename": "Utils.Ranking", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.Ranking.Ranking", "modulename": "Utils.Ranking", "qualname": "Ranking", "kind": "class", "doc": "<p>Class to optimize the sorting process by partially splitting the ranking\nusing an ordered dictionary structure.</p>\n"}, {"fullname": "Utils.Ranking.Ranking.__init__", "modulename": "Utils.Ranking", "qualname": "Ranking.__init__", "kind": "function", "doc": "<p>Initialize an empty ordered dictionary to store the ranking structure.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "Utils.Ranking.Ranking.ordered_dict", "modulename": "Utils.Ranking", "qualname": "Ranking.ordered_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.Ranking.classement", "modulename": "Utils.Ranking", "qualname": "classement", "kind": "variable", "doc": "<p></p>\n", "default_value": "[[&#x27;/&#x27;, 0, 0, 0, 0, 0, 0, 0]]"}, {"fullname": "Utils.Ranking.r", "modulename": "Utils.Ranking", "qualname": "r", "kind": "variable", "doc": "<p></p>\n", "default_value": "[(5, 20, 0.014285714285714285), (4, 60, 0.02), (5, 30, 0.016666666666666666), (1, 80, 0.016666666666666666), (5, 90, 0.025), (9, 30, 0.02), (7, 80, 0.016666666666666666), (9, 90, 0.03333333333333333)]"}, {"fullname": "Utils.Ranking.len_", "modulename": "Utils.Ranking", "qualname": "len_", "kind": "variable", "doc": "<p></p>\n", "default_value": "8"}, {"fullname": "Utils.Ranking.dom", "modulename": "Utils.Ranking", "qualname": "dom", "kind": "variable", "doc": "<p></p>\n", "default_value": "[[&#x27;/&#x27;, 0, 0, 0, 0, 0, 0, 0], [0, &#x27;/&#x27;, 0, 0, 0, 0, 0, 0], [0, 0, &#x27;/&#x27;, 0, 0, 0, 0, 0], [0, 0, 0, &#x27;/&#x27;, 0, 0, 0, 0], [0, 0, 0, 0, &#x27;/&#x27;, 0, 0, 0], [0, 0, 0, 0, 0, &#x27;/&#x27;, 0, 0], [0, 0, 0, 0, 0, 0, &#x27;/&#x27;, 0], [0, 0, 0, 0, 0, 0, 0, &#x27;/&#x27;]]"}, {"fullname": "Utils.Ranking.tot", "modulename": "Utils.Ranking", "qualname": "tot", "kind": "variable", "doc": "<p></p>\n", "default_value": "[0, 0, 0, 0, 0, 0, 0, 0]"}, {"fullname": "Utils.TimerUtils", "modulename": "Utils.TimerUtils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Utils.TimerUtils.TimeCalc", "modulename": "Utils.TimerUtils", "qualname": "TimeCalc", "kind": "class", "doc": "<p>Class that calculates execution time for algorithms, with options to format output in a human-readable way.</p>\n"}, {"fullname": "Utils.TimerUtils.TimeCalc.__init__", "modulename": "Utils.TimerUtils", "qualname": "TimeCalc.__init__", "kind": "function", "doc": "<p>Initialize the timer at object creation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>samples_count</strong>:  Number of samples (or iterations) the algorithm processes.</li>\n<li><strong>algo_type</strong>:  Name of the algorithm being timed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">samples_count</span>, </span><span class=\"param\"><span class=\"n\">algo_type</span></span>)</span>"}, {"fullname": "Utils.TimerUtils.TimeCalc.samples_count", "modulename": "Utils.TimerUtils", "qualname": "TimeCalc.samples_count", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.TimerUtils.TimeCalc.algo_type", "modulename": "Utils.TimerUtils", "qualname": "TimeCalc.algo_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.TimerUtils.TimeCalc.start_time", "modulename": "Utils.TimerUtils", "qualname": "TimeCalc.start_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.TimerUtils.TimeCalc.ratio", "modulename": "Utils.TimerUtils", "qualname": "TimeCalc.ratio", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Utils.TimerUtils.TimeCalc.format_time", "modulename": "Utils.TimerUtils", "qualname": "TimeCalc.format_time", "kind": "function", "doc": "<p>Format a given time duration (in seconds) into a readable string like 'Xm - Ys' or 'Xh - Ym - Zs'.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_to_format</strong>:  Time in seconds.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Formatted string representing the time duration.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">time_to_format</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.TimerUtils.TimeCalc.get_formated_data", "modulename": "Utils.TimerUtils", "qualname": "TimeCalc.get_formated_data", "kind": "function", "doc": "<p>Get a formatted string representing the execution time and average time per sample.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Formatted result string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.TimerUtils.TimeCalc.stop", "modulename": "Utils.TimerUtils", "qualname": "TimeCalc.stop", "kind": "function", "doc": "<p>Stop the timer, calculate execution time and average time per sample.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Utils.TimerUtils.TimeCalc.humanizeTime", "modulename": "Utils.TimerUtils", "qualname": "TimeCalc.humanizeTime", "kind": "function", "doc": "<p>Convert a duration (in seconds) into a human-friendly format (e.g., \"4 hours, 32 minutes\").</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time</strong>:  Time in seconds.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Human-readable string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();